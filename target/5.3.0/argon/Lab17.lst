
/Users/admin/Documents/CTD_2023/Labs/Lab17/target/5.3.0/argon/Lab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000267c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6698  000b6698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000cc  2003e5a8  000b66bc  0000e5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000017c  2003e674  2003e674  0001e674  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6788  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b678c  000b678c  0001678c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6792  000b6792  00016792  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b67b6  000b67b6  000167b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000ffa22  00000000  00000000  000167ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ffed  00000000  00000000  001161dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00038f6e  00000000  00000000  001261c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000029c8  00000000  00000000  0015f137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a310  00000000  00000000  00161aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033ae8  00000000  00000000  0016be0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00037338  00000000  00000000  0019f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138520  00000000  00000000  001d6c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000078b8  00000000  00000000  0030f150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f001 ff95 	bl	b5f80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f001 ff9d 	bl	b5f9c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e5a8 	.word	0x2003e5a8
   b406c:	000b66bc 	.word	0x000b66bc
   b4070:	2003e674 	.word	0x2003e674
   b4074:	2003e674 	.word	0x2003e674
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 fded 	bl	b5c60 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6674 	.word	0x000b6674
   b40a0:	000b6698 	.word	0x000b6698

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b830 	b.w	b4108 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f835 	bl	b4118 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 bd8d 	b.w	b5bd0 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 be6b 	b.w	b4d90 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 be69 	b.w	b4d90 <malloc>

000b40be <_ZdaPv>:
   b40be:	f000 be6f 	b.w	b4da0 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f000 be6d 	b.w	b4da0 <free>

000b40c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c6:	7800      	ldrb	r0, [r0, #0]
   b40c8:	fab0 f080 	clz	r0, r0
   b40cc:	0940      	lsrs	r0, r0, #5
   b40ce:	4770      	bx	lr

000b40d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40d0:	2301      	movs	r3, #1
   b40d2:	7003      	strb	r3, [r0, #0]
   b40d4:	4770      	bx	lr
	...

000b40d8 <_Z8callbackPcPhj>:
  currentState = fsm[currentState].nextState[input];
  client.publish("FSMfenton", (String)(fsm[currentState].output));
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b40d8:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   b40da:	f102 0308 	add.w	r3, r2, #8
   b40de:	f023 0307 	bic.w	r3, r3, #7
{
   b40e2:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40e4:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40e8:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40ea:	4668      	mov	r0, sp
   b40ec:	f001 ff48 	bl	b5f80 <memcpy>
  p[length] = NULL;
   b40f0:	2300      	movs	r3, #0

  input = atoi(p);
   b40f2:	4668      	mov	r0, sp
  p[length] = NULL;
   b40f4:	f80d 3004 	strb.w	r3, [sp, r4]
  input = atoi(p);
   b40f8:	f001 ff3e 	bl	b5f78 <atoi>
   b40fc:	4b01      	ldr	r3, [pc, #4]	; (b4104 <_Z8callbackPcPhj+0x2c>)
   b40fe:	6018      	str	r0, [r3, #0]
   b4100:	46bd      	mov	sp, r7
   b4102:	bd98      	pop	{r3, r4, r7, pc}
   b4104:	2003e6d8 	.word	0x2003e6d8

000b4108 <setup>:
  client.subscribe("FSMfentonOutput");
   b4108:	4901      	ldr	r1, [pc, #4]	; (b4110 <setup+0x8>)
   b410a:	4802      	ldr	r0, [pc, #8]	; (b4114 <setup+0xc>)
   b410c:	f000 bca1 	b.w	b4a52 <_ZN4MQTT9subscribeEPKc>
   b4110:	000b6210 	.word	0x000b6210
   b4114:	2003e674 	.word	0x2003e674

000b4118 <loop>:
{
   b4118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (client.isConnected())
   b411a:	481c      	ldr	r0, [pc, #112]	; (b418c <loop+0x74>)
   b411c:	f000 f97a 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b4120:	b328      	cbz	r0, b416e <loop+0x56>
    client.loop();
   b4122:	481a      	ldr	r0, [pc, #104]	; (b418c <loop+0x74>)
   b4124:	f000 fb4d 	bl	b47c2 <_ZN4MQTT4loopEv>
  delay(fsm[currentState].waitTime);
   b4128:	4d19      	ldr	r5, [pc, #100]	; (b4190 <loop+0x78>)
   b412a:	4c1a      	ldr	r4, [pc, #104]	; (b4194 <loop+0x7c>)
   b412c:	682a      	ldr	r2, [r5, #0]
   b412e:	2618      	movs	r6, #24
   b4130:	fb06 4202 	mla	r2, r6, r2, r4
   b4134:	6850      	ldr	r0, [r2, #4]
   b4136:	f000 fe5b 	bl	b4df0 <delay>
  currentState = fsm[currentState].nextState[input];
   b413a:	4b17      	ldr	r3, [pc, #92]	; (b4198 <loop+0x80>)
   b413c:	682a      	ldr	r2, [r5, #0]
   b413e:	681b      	ldr	r3, [r3, #0]
   b4140:	2106      	movs	r1, #6
   b4142:	fb01 3302 	mla	r3, r1, r2, r3
   b4146:	3302      	adds	r3, #2
  client.publish("FSMfenton", (String)(fsm[currentState].output));
   b4148:	220a      	movs	r2, #10
  currentState = fsm[currentState].nextState[input];
   b414a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   b414e:	602b      	str	r3, [r5, #0]
  client.publish("FSMfenton", (String)(fsm[currentState].output));
   b4150:	4373      	muls	r3, r6
   b4152:	4668      	mov	r0, sp
   b4154:	58e1      	ldr	r1, [r4, r3]
   b4156:	f001 f89e 	bl	b5296 <_ZN6StringC1Eih>
   b415a:	9a00      	ldr	r2, [sp, #0]
   b415c:	490f      	ldr	r1, [pc, #60]	; (b419c <loop+0x84>)
   b415e:	480b      	ldr	r0, [pc, #44]	; (b418c <loop+0x74>)
   b4160:	f000 fad3 	bl	b470a <_ZN4MQTT7publishEPKcS1_>
   b4164:	4668      	mov	r0, sp
   b4166:	f001 f825 	bl	b51b4 <_ZN6StringD1Ev>
}
   b416a:	b004      	add	sp, #16
   b416c:	bd70      	pop	{r4, r5, r6, pc}
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b416e:	4668      	mov	r0, sp
   b4170:	f000 fd9e 	bl	b4cb0 <spark_deviceID>
    client.connect(System.deviceID());
   b4174:	9900      	ldr	r1, [sp, #0]
   b4176:	4805      	ldr	r0, [pc, #20]	; (b418c <loop+0x74>)
   b4178:	f000 fa3c 	bl	b45f4 <_ZN4MQTT7connectEPKc>
   b417c:	4668      	mov	r0, sp
   b417e:	f001 f819 	bl	b51b4 <_ZN6StringD1Ev>
    client.subscribe("FSMfentonOutput");
   b4182:	4907      	ldr	r1, [pc, #28]	; (b41a0 <loop+0x88>)
   b4184:	4801      	ldr	r0, [pc, #4]	; (b418c <loop+0x74>)
   b4186:	f000 fc64 	bl	b4a52 <_ZN4MQTT9subscribeEPKc>
   b418a:	e7cd      	b.n	b4128 <loop+0x10>
   b418c:	2003e674 	.word	0x2003e674
   b4190:	2003e6d4 	.word	0x2003e6d4
   b4194:	2003e5a8 	.word	0x2003e5a8
   b4198:	2003e6d8 	.word	0x2003e6d8
   b419c:	000b6220 	.word	0x000b6220
   b41a0:	000b6210 	.word	0x000b6210

000b41a4 <_GLOBAL__sub_I_currentState>:
   b41a4:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b41a6:	2100      	movs	r1, #0
   b41a8:	2001      	movs	r0, #1
   b41aa:	f000 fd65 	bl	b4c78 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b41ae:	2300      	movs	r3, #0
   b41b0:	9300      	str	r3, [sp, #0]
   b41b2:	4905      	ldr	r1, [pc, #20]	; (b41c8 <_GLOBAL__sub_I_currentState+0x24>)
   b41b4:	4b05      	ldr	r3, [pc, #20]	; (b41cc <_GLOBAL__sub_I_currentState+0x28>)
   b41b6:	4806      	ldr	r0, [pc, #24]	; (b41d0 <_GLOBAL__sub_I_currentState+0x2c>)
   b41b8:	f240 725b 	movw	r2, #1883	; 0x75b
   b41bc:	f000 f84e 	bl	b425c <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b41c0:	b003      	add	sp, #12
   b41c2:	f85d fb04 	ldr.w	pc, [sp], #4
   b41c6:	bf00      	nop
   b41c8:	000b622a 	.word	0x000b622a
   b41cc:	000b40d9 	.word	0x000b40d9
   b41d0:	2003e674 	.word	0x2003e674

000b41d4 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b41d4:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b41d8:	b510      	push	{r4, lr}
   b41da:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b41dc:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b41de:	b113      	cbz	r3, b41e6 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b41e0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b41e2:	f000 fc41 	bl	b4a68 <os_mutex_lock>
#endif
#endif
#endif
        }
   b41e6:	4620      	mov	r0, r4
   b41e8:	bd10      	pop	{r4, pc}

000b41ea <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b41ea:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b41ec:	6803      	ldr	r3, [r0, #0]
   b41ee:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b41f2:	4604      	mov	r4, r0
            if (mqtt->thread)
   b41f4:	b112      	cbz	r2, b41fc <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b41f6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b41f8:	f000 fc3e 	bl	b4a78 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b41fc:	4620      	mov	r0, r4
   b41fe:	bd10      	pop	{r4, pc}

000b4200 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4202:	461f      	mov	r7, r3
   b4204:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4208:	4604      	mov	r4, r0
   b420a:	460d      	mov	r5, r1
   b420c:	4616      	mov	r6, r2
    if (thread) {
   b420e:	b12b      	cbz	r3, b421c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4210:	2301      	movs	r3, #1
   b4212:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4216:	3058      	adds	r0, #88	; 0x58
   b4218:	f000 fc1e 	bl	b4a58 <os_mutex_create>
    }
    this->callback = callback;
   b421c:	9b08      	ldr	r3, [sp, #32]
   b421e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4220:	2300      	movs	r3, #0
   b4222:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4224:	b106      	cbz	r6, b4228 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4226:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4228:	b125      	cbz	r5, b4234 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b422a:	4629      	mov	r1, r5
   b422c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4230:	f001 f81f 	bl	b5272 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4234:	9b06      	ldr	r3, [sp, #24]
   b4236:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4238:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b423a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b423c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4240:	2bff      	cmp	r3, #255	; 0xff
   b4242:	bfb8      	it	lt
   b4244:	23ff      	movlt	r3, #255	; 0xff
   b4246:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b424a:	b108      	cbz	r0, b4250 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b424c:	f7ff ff37 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4250:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4254:	f7ff ff31 	bl	b40ba <_Znaj>
   b4258:	61e0      	str	r0, [r4, #28]
}
   b425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b425c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b425c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4260:	4604      	mov	r4, r0
            bool thread) {
   b4262:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4264:	4617      	mov	r7, r2
   b4266:	4698      	mov	r8, r3
   b4268:	460e      	mov	r6, r1
            bool thread) {
   b426a:	f001 fb15 	bl	b5898 <_ZN9TCPClientC1Ev>
   b426e:	490d      	ldr	r1, [pc, #52]	; (b42a4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4270:	61e5      	str	r5, [r4, #28]
   b4272:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4276:	f000 ffe8 	bl	b524a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b427a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b427e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4280:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4284:	22ff      	movs	r2, #255	; 0xff
   b4286:	230f      	movs	r3, #15
   b4288:	e9cd 3200 	strd	r3, r2, [sp]
   b428c:	4620      	mov	r0, r4
            bool thread) {
   b428e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4292:	463b      	mov	r3, r7
   b4294:	462a      	mov	r2, r5
   b4296:	4631      	mov	r1, r6
   b4298:	f7ff ffb2 	bl	b4200 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b429c:	4620      	mov	r0, r4
   b429e:	b004      	add	sp, #16
   b42a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42a4:	000b6570 	.word	0x000b6570

000b42a8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b42a8:	b510      	push	{r4, lr}
   b42aa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b42ac:	4620      	mov	r0, r4
   b42ae:	f001 fa4f 	bl	b5750 <_ZN9TCPClient9availableEv>
   b42b2:	2800      	cmp	r0, #0
   b42b4:	d0fa      	beq.n	b42ac <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b42b6:	4620      	mov	r0, r4
   b42b8:	f001 f834 	bl	b5324 <_ZN9TCPClient4readEv>
}
   b42bc:	b2c0      	uxtb	r0, r0
   b42be:	bd10      	pop	{r4, pc}

000b42c0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b42c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b42c4:	4605      	mov	r5, r0
   b42c6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b42c8:	f7ff ffee 	bl	b42a8 <_ZN4MQTT8readByteEv>
   b42cc:	69eb      	ldr	r3, [r5, #28]
   b42ce:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b42d0:	69eb      	ldr	r3, [r5, #28]
   b42d2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b42d6:	f04f 0901 	mov.w	r9, #1
   b42da:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b42de:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b42e0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b42e2:	4628      	mov	r0, r5
   b42e4:	f7ff ffe0 	bl	b42a8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b42e8:	4626      	mov	r6, r4
   b42ea:	69eb      	ldr	r3, [r5, #28]
   b42ec:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b42ee:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b42f2:	fb13 f309 	smulbb	r3, r3, r9
   b42f6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b42f8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b42fa:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b42fc:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b42fe:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4300:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4304:	d4ed      	bmi.n	b42e2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4306:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4308:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b430c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4310:	d11e      	bne.n	b4350 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4312:	4628      	mov	r0, r5
   b4314:	f7ff ffc8 	bl	b42a8 <_ZN4MQTT8readByteEv>
   b4318:	69eb      	ldr	r3, [r5, #28]
   b431a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b431c:	4628      	mov	r0, r5
   b431e:	f7ff ffc3 	bl	b42a8 <_ZN4MQTT8readByteEv>
   b4322:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4324:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4326:	b2b6      	uxth	r6, r6
   b4328:	69eb      	ldr	r3, [r5, #28]
   b432a:	b2a4      	uxth	r4, r4
   b432c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b432e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4330:	b2b6      	uxth	r6, r6
   b4332:	42be      	cmp	r6, r7
   b4334:	d20e      	bcs.n	b4354 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4336:	4628      	mov	r0, r5
   b4338:	f7ff ffb6 	bl	b42a8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b433c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4340:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4342:	bf84      	itt	hi
   b4344:	69eb      	ldrhi	r3, [r5, #28]
   b4346:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4348:	3401      	adds	r4, #1
   b434a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b434c:	3601      	adds	r6, #1
   b434e:	e7ef      	b.n	b4330 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4350:	2600      	movs	r6, #0
   b4352:	e7ed      	b.n	b4330 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4354:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4358:	42a3      	cmp	r3, r4
   b435a:	bf2c      	ite	cs
   b435c:	4620      	movcs	r0, r4
   b435e:	2000      	movcc	r0, #0
   b4360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4364 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4368:	4615      	mov	r5, r2
   b436a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b436c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b436e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4370:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4372:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4374:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4376:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b437a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b437e:	f103 0401 	add.w	r4, r3, #1
   b4382:	4403      	add	r3, r0
            digit |= 0x80;
   b4384:	bf88      	it	hi
   b4386:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b438a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b438e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4392:	b2e4      	uxtb	r4, r4
   b4394:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4398:	d81e      	bhi.n	b43d8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b439a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b439e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b43a2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b43a4:	4622      	mov	r2, r4
   b43a6:	a901      	add	r1, sp, #4
   b43a8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b43aa:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b43ae:	f001 fde7 	bl	b5f80 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b43b2:	1c72      	adds	r2, r6, #1
   b43b4:	4422      	add	r2, r4
   b43b6:	4641      	mov	r1, r8
   b43b8:	4638      	mov	r0, r7
   b43ba:	f000 ff9e 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
   b43be:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43c0:	f000 fb72 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b43c4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b43c6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b43c8:	4432      	add	r2, r6
   b43ca:	b2a8      	uxth	r0, r5
}
   b43cc:	1a13      	subs	r3, r2, r0
   b43ce:	4258      	negs	r0, r3
   b43d0:	4158      	adcs	r0, r3
   b43d2:	b002      	add	sp, #8
   b43d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b43d8:	4623      	mov	r3, r4
   b43da:	e7ca      	b.n	b4372 <_ZN4MQTT5writeEhPht+0xe>

000b43dc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b43dc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b43de:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43e0:	4605      	mov	r5, r0
    pos += 2;
   b43e2:	b298      	uxth	r0, r3
   b43e4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b43e6:	5cce      	ldrb	r6, [r1, r3]
   b43e8:	b29c      	uxth	r4, r3
   b43ea:	b156      	cbz	r6, b4402 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b43ec:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b43f0:	4584      	cmp	ip, r0
   b43f2:	f103 0701 	add.w	r7, r3, #1
   b43f6:	d904      	bls.n	b4402 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b43f8:	1c44      	adds	r4, r0, #1
   b43fa:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b43fc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b43fe:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4400:	e7f1      	b.n	b43e6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4402:	b299      	uxth	r1, r3
   b4404:	1a41      	subs	r1, r0, r1
   b4406:	440a      	add	r2, r1
   b4408:	0a21      	lsrs	r1, r4, #8
   b440a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b440e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4412:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4414 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4414:	b538      	push	{r3, r4, r5, lr}
   b4416:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4418:	f001 f8bc 	bl	b5594 <_ZN9TCPClient9connectedEv>
   b441c:	2800      	cmp	r0, #0
   b441e:	bf14      	ite	ne
   b4420:	2501      	movne	r5, #1
   b4422:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4424:	d102      	bne.n	b442c <_ZN4MQTT11isConnectedEv+0x18>
   b4426:	4620      	mov	r0, r4
   b4428:	f001 f9ec 	bl	b5804 <_ZN9TCPClient4stopEv>
    return rc;
}
   b442c:	4628      	mov	r0, r5
   b442e:	bd38      	pop	{r3, r4, r5, pc}

000b4430 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4434:	b088      	sub	sp, #32
   b4436:	4604      	mov	r4, r0
   b4438:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b443c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4440:	4689      	mov	r9, r1
   b4442:	4617      	mov	r7, r2
   b4444:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4446:	f7ff ffe5 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b444a:	4605      	mov	r5, r0
   b444c:	2800      	cmp	r0, #0
   b444e:	f040 80cd 	bne.w	b45ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4452:	4621      	mov	r1, r4
   b4454:	a801      	add	r0, sp, #4
   b4456:	f7ff febd 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b445a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b445c:	2900      	cmp	r1, #0
   b445e:	f040 8088 	bne.w	b4572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4462:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4466:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4468:	462b      	mov	r3, r5
   b446a:	4620      	mov	r0, r4
   b446c:	f001 f814 	bl	b5498 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4470:	2800      	cmp	r0, #0
   b4472:	d07a      	beq.n	b456a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4474:	2301      	movs	r3, #1
   b4476:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4478:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b447c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b447e:	2b04      	cmp	r3, #4
   b4480:	4b5b      	ldr	r3, [pc, #364]	; (b45f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4482:	f040 8081 	bne.w	b4588 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4486:	6818      	ldr	r0, [r3, #0]
   b4488:	8899      	ldrh	r1, [r3, #4]
   b448a:	799b      	ldrb	r3, [r3, #6]
   b448c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4490:	f88d 300e 	strb.w	r3, [sp, #14]
   b4494:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4496:	f8c2 0005 	str.w	r0, [r2, #5]
   b449a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b449e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b44a2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b44a6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b44a8:	230c      	movs	r3, #12
            if (willTopic) {
   b44aa:	f1b8 0f00 	cmp.w	r8, #0
   b44ae:	f000 8081 	beq.w	b45b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b44b2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b44b6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b44ba:	0140      	lsls	r0, r0, #5
   b44bc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b44c0:	f040 0006 	orr.w	r0, r0, #6
   b44c4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b44c6:	f1ba 0f00 	cmp.w	sl, #0
   b44ca:	d101      	bne.n	b44d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b44cc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b44d0:	b11f      	cbz	r7, b44da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b44d2:	2e00      	cmp	r6, #0
   b44d4:	d170      	bne.n	b45b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b44d6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b44da:	69e2      	ldr	r2, [r4, #28]
   b44dc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b44de:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b44e0:	69e1      	ldr	r1, [r4, #28]
   b44e2:	1c58      	adds	r0, r3, #1
   b44e4:	1212      	asrs	r2, r2, #8
   b44e6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b44e8:	1c9a      	adds	r2, r3, #2
   b44ea:	69e1      	ldr	r1, [r4, #28]
   b44ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b44ee:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b44f0:	3303      	adds	r3, #3
   b44f2:	69e2      	ldr	r2, [r4, #28]
   b44f4:	4649      	mov	r1, r9
   b44f6:	4620      	mov	r0, r4
   b44f8:	f7ff ff70 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
   b44fc:	4603      	mov	r3, r0
            if (willTopic) {
   b44fe:	f1b8 0f00 	cmp.w	r8, #0
   b4502:	d00b      	beq.n	b451c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4504:	69e2      	ldr	r2, [r4, #28]
   b4506:	4641      	mov	r1, r8
   b4508:	4620      	mov	r0, r4
   b450a:	f7ff ff67 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b450e:	69e2      	ldr	r2, [r4, #28]
   b4510:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4512:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4514:	4620      	mov	r0, r4
   b4516:	f7ff ff61 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
   b451a:	4603      	mov	r3, r0
            if(user != NULL) {
   b451c:	b167      	cbz	r7, b4538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b451e:	69e2      	ldr	r2, [r4, #28]
   b4520:	4639      	mov	r1, r7
   b4522:	4620      	mov	r0, r4
   b4524:	f7ff ff5a 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
   b4528:	4603      	mov	r3, r0
                if(pass != NULL) {
   b452a:	b12e      	cbz	r6, b4538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b452c:	69e2      	ldr	r2, [r4, #28]
   b452e:	4631      	mov	r1, r6
   b4530:	4620      	mov	r0, r4
   b4532:	f7ff ff53 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
   b4536:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4538:	3b05      	subs	r3, #5
   b453a:	69e2      	ldr	r2, [r4, #28]
   b453c:	b29b      	uxth	r3, r3
   b453e:	2110      	movs	r1, #16
   b4540:	4620      	mov	r0, r4
   b4542:	f7ff ff0f 	bl	b4364 <_ZN4MQTT5writeEhPht>
   b4546:	f000 faaf 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b454a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b454e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4552:	4620      	mov	r0, r4
   b4554:	f001 f8fc 	bl	b5750 <_ZN9TCPClient9availableEv>
   b4558:	bb88      	cbnz	r0, b45be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b455a:	f000 faa5 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b455e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4560:	1ac0      	subs	r0, r0, r3
   b4562:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4564:	4373      	muls	r3, r6
   b4566:	4298      	cmp	r0, r3
   b4568:	d9f3      	bls.n	b4552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b456a:	4620      	mov	r0, r4
   b456c:	f001 f94a 	bl	b5804 <_ZN9TCPClient4stopEv>
   b4570:	e035      	b.n	b45de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4572:	a802      	add	r0, sp, #8
   b4574:	f000 fd04 	bl	b4f80 <_ZN9IPAddressC1EPKh>
   b4578:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b457c:	462b      	mov	r3, r5
   b457e:	a902      	add	r1, sp, #8
   b4580:	4620      	mov	r0, r4
   b4582:	f001 f869 	bl	b5658 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4586:	e773      	b.n	b4470 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4588:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b458c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4590:	7bdb      	ldrb	r3, [r3, #15]
   b4592:	f10d 0c08 	add.w	ip, sp, #8
   b4596:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b459a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b459e:	ab02      	add	r3, sp, #8
   b45a0:	cb03      	ldmia	r3!, {r0, r1}
   b45a2:	f8c2 0005 	str.w	r0, [r2, #5]
   b45a6:	f8c2 1009 	str.w	r1, [r2, #9]
   b45aa:	f89c 3000 	ldrb.w	r3, [ip]
   b45ae:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b45b0:	230e      	movs	r3, #14
   b45b2:	e77a      	b.n	b44aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b45b4:	2002      	movs	r0, #2
   b45b6:	e786      	b.n	b44c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b45b8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b45bc:	e78d      	b.n	b44da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b45be:	a902      	add	r1, sp, #8
   b45c0:	4620      	mov	r0, r4
   b45c2:	f7ff fe7d 	bl	b42c0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b45c6:	2804      	cmp	r0, #4
   b45c8:	d1cf      	bne.n	b456a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b45ca:	69e3      	ldr	r3, [r4, #28]
   b45cc:	78de      	ldrb	r6, [r3, #3]
   b45ce:	2e00      	cmp	r6, #0
   b45d0:	d1cb      	bne.n	b456a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b45d2:	f000 fa69 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b45d6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b45d8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b45da:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b45de:	a801      	add	r0, sp, #4
   b45e0:	f7ff fe03 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b45e4:	4628      	mov	r0, r5
   b45e6:	b008      	add	sp, #32
   b45e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b45ec:	2500      	movs	r5, #0
   b45ee:	e7f9      	b.n	b45e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b45f0:	000b61ec 	.word	0x000b61ec

000b45f4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b45f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b45f6:	2301      	movs	r3, #1
   b45f8:	2204      	movs	r2, #4
   b45fa:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b45fe:	2300      	movs	r3, #0
   b4600:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b4604:	e9cd 3300 	strd	r3, r3, [sp]
   b4608:	461a      	mov	r2, r3
   b460a:	f7ff ff11 	bl	b4430 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b460e:	b007      	add	sp, #28
   b4610:	f85d fb04 	ldr.w	pc, [sp], #4

000b4614 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4618:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b461c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4620:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4624:	4604      	mov	r4, r0
   b4626:	468b      	mov	fp, r1
   b4628:	4616      	mov	r6, r2
   b462a:	461f      	mov	r7, r3
    if (isConnected()) {
   b462c:	f7ff fef2 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b4630:	4682      	mov	sl, r0
   b4632:	2800      	cmp	r0, #0
   b4634:	d051      	beq.n	b46da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4636:	4621      	mov	r1, r4
   b4638:	a801      	add	r0, sp, #4
   b463a:	f7ff fdcb 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b463e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4642:	69e0      	ldr	r0, [r4, #28]
   b4644:	2100      	movs	r1, #0
   b4646:	f001 fca9 	bl	b5f9c <memset>
        length = writeString(topic, buffer, length);
   b464a:	2305      	movs	r3, #5
   b464c:	69e2      	ldr	r2, [r4, #28]
   b464e:	4659      	mov	r1, fp
   b4650:	4620      	mov	r0, r4
   b4652:	f7ff fec3 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4656:	1e6b      	subs	r3, r5, #1
   b4658:	2b01      	cmp	r3, #1
   b465a:	d815      	bhi.n	b4688 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b465c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b465e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4660:	3101      	adds	r1, #1
   b4662:	b289      	uxth	r1, r1
   b4664:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4666:	0a09      	lsrs	r1, r1, #8
   b4668:	5419      	strb	r1, [r3, r0]
   b466a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b466c:	69e3      	ldr	r3, [r4, #28]
   b466e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4670:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4672:	3002      	adds	r0, #2
   b4674:	5499      	strb	r1, [r3, r2]
   b4676:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4678:	f1b8 0f00 	cmp.w	r8, #0
   b467c:	d004      	beq.n	b4688 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b467e:	8c23      	ldrh	r3, [r4, #32]
   b4680:	1c5a      	adds	r2, r3, #1
   b4682:	8422      	strh	r2, [r4, #32]
   b4684:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4688:	2100      	movs	r1, #0
   b468a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b468c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b468e:	69e2      	ldr	r2, [r4, #28]
   b4690:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4692:	d90a      	bls.n	b46aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4694:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4698:	459c      	cmp	ip, r3
   b469a:	d906      	bls.n	b46aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b469c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b46a0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b46a4:	3101      	adds	r1, #1
   b46a6:	b289      	uxth	r1, r1
   b46a8:	e7ef      	b.n	b468a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b46aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b46ae:	2900      	cmp	r1, #0
   b46b0:	bf0c      	ite	eq
   b46b2:	2130      	moveq	r1, #48	; 0x30
   b46b4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b46b6:	f1b9 0f00 	cmp.w	r9, #0
   b46ba:	d001      	beq.n	b46c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b46bc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b46c0:	2d02      	cmp	r5, #2
   b46c2:	d10e      	bne.n	b46e2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b46c4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b46c8:	3b05      	subs	r3, #5
   b46ca:	b29b      	uxth	r3, r3
   b46cc:	4620      	mov	r0, r4
   b46ce:	f7ff fe49 	bl	b4364 <_ZN4MQTT5writeEhPht>
   b46d2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b46d4:	a801      	add	r0, sp, #4
   b46d6:	f7ff fd88 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b46da:	4650      	mov	r0, sl
   b46dc:	b003      	add	sp, #12
   b46de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b46e2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b46e4:	bf08      	it	eq
   b46e6:	f041 0102 	orreq.w	r1, r1, #2
   b46ea:	e7ed      	b.n	b46c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b46ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b46ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b46ee:	9c08      	ldr	r4, [sp, #32]
   b46f0:	9403      	str	r4, [sp, #12]
   b46f2:	2400      	movs	r4, #0
   b46f4:	9402      	str	r4, [sp, #8]
   b46f6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b46fa:	9401      	str	r4, [sp, #4]
   b46fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4700:	9400      	str	r4, [sp, #0]
   b4702:	f7ff ff87 	bl	b4614 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4706:	b004      	add	sp, #16
   b4708:	bd10      	pop	{r4, pc}

000b470a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b470a:	b530      	push	{r4, r5, lr}
   b470c:	b087      	sub	sp, #28
   b470e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4710:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4712:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4714:	9204      	str	r2, [sp, #16]
   b4716:	f7ff fc8b 	bl	b4030 <strlen>
   b471a:	2500      	movs	r5, #0
   b471c:	4603      	mov	r3, r0
   b471e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4722:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4726:	9500      	str	r5, [sp, #0]
   b4728:	4620      	mov	r0, r4
   b472a:	f7ff ffdf 	bl	b46ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b472e:	b007      	add	sp, #28
   b4730:	bd30      	pop	{r4, r5, pc}

000b4732 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4732:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4734:	4604      	mov	r4, r0
   b4736:	460e      	mov	r6, r1
    if (isConnected()) {
   b4738:	f7ff fe6c 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b473c:	4605      	mov	r5, r0
   b473e:	b1c8      	cbz	r0, b4774 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4740:	4621      	mov	r1, r4
   b4742:	a801      	add	r0, sp, #4
   b4744:	f7ff fd46 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4748:	69e3      	ldr	r3, [r4, #28]
   b474a:	2262      	movs	r2, #98	; 0x62
   b474c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b474e:	69e3      	ldr	r3, [r4, #28]
   b4750:	2202      	movs	r2, #2
   b4752:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4754:	69e3      	ldr	r3, [r4, #28]
   b4756:	0a32      	lsrs	r2, r6, #8
   b4758:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b475a:	69e3      	ldr	r3, [r4, #28]
   b475c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b475e:	69e1      	ldr	r1, [r4, #28]
   b4760:	2204      	movs	r2, #4
   b4762:	4620      	mov	r0, r4
   b4764:	f000 fdc9 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
   b4768:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b476a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b476c:	bf18      	it	ne
   b476e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4770:	f7ff fd3b 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b4774:	4628      	mov	r0, r5
   b4776:	b002      	add	sp, #8
   b4778:	bd70      	pop	{r4, r5, r6, pc}

000b477a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b477a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b477c:	4604      	mov	r4, r0
   b477e:	460e      	mov	r6, r1
    if (isConnected()) {
   b4780:	f7ff fe48 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b4784:	4605      	mov	r5, r0
   b4786:	b1c8      	cbz	r0, b47bc <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4788:	4621      	mov	r1, r4
   b478a:	a801      	add	r0, sp, #4
   b478c:	f7ff fd22 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4790:	69e3      	ldr	r3, [r4, #28]
   b4792:	2272      	movs	r2, #114	; 0x72
   b4794:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4796:	69e3      	ldr	r3, [r4, #28]
   b4798:	2202      	movs	r2, #2
   b479a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b479c:	69e3      	ldr	r3, [r4, #28]
   b479e:	0a32      	lsrs	r2, r6, #8
   b47a0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b47a2:	69e3      	ldr	r3, [r4, #28]
   b47a4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b47a6:	69e1      	ldr	r1, [r4, #28]
   b47a8:	2204      	movs	r2, #4
   b47aa:	4620      	mov	r0, r4
   b47ac:	f000 fda5 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
   b47b0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b47b2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b47b4:	bf18      	it	ne
   b47b6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b47b8:	f7ff fd17 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b47bc:	4628      	mov	r0, r5
   b47be:	b002      	add	sp, #8
   b47c0:	bd70      	pop	{r4, r5, r6, pc}

000b47c2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b47c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47c6:	ed2d 8b02 	vpush	{d8}
   b47ca:	b087      	sub	sp, #28
   b47cc:	af00      	add	r7, sp, #0
   b47ce:	4604      	mov	r4, r0
    if (isConnected()) {
   b47d0:	f7ff fe20 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b47d4:	4681      	mov	r9, r0
   b47d6:	b1f8      	cbz	r0, b4818 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b47d8:	4621      	mov	r1, r4
   b47da:	f107 0014 	add.w	r0, r7, #20
   b47de:	f7ff fcf9 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
   b47e2:	f000 f961 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b47e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b47e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b47ec:	4353      	muls	r3, r2
   b47ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b47f0:	1a82      	subs	r2, r0, r2
   b47f2:	429a      	cmp	r2, r3
   b47f4:	4606      	mov	r6, r0
   b47f6:	d803      	bhi.n	b4800 <_ZN4MQTT4loopEv+0x3e>
   b47f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b47fa:	1a82      	subs	r2, r0, r2
   b47fc:	4293      	cmp	r3, r2
   b47fe:	d221      	bcs.n	b4844 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4800:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4804:	b17b      	cbz	r3, b4826 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4806:	4620      	mov	r0, r4
   b4808:	f000 fffc 	bl	b5804 <_ZN9TCPClient4stopEv>
                return false;
   b480c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4810:	f107 0014 	add.w	r0, r7, #20
   b4814:	f7ff fce9 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b4818:	4648      	mov	r0, r9
   b481a:	371c      	adds	r7, #28
   b481c:	46bd      	mov	sp, r7
   b481e:	ecbd 8b02 	vpop	{d8}
   b4822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4826:	69e2      	ldr	r2, [r4, #28]
   b4828:	21c0      	movs	r1, #192	; 0xc0
   b482a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b482c:	69e2      	ldr	r2, [r4, #28]
   b482e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4830:	69e1      	ldr	r1, [r4, #28]
   b4832:	2202      	movs	r2, #2
   b4834:	4620      	mov	r0, r4
   b4836:	f000 fd60 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b483a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b483e:	2301      	movs	r3, #1
   b4840:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4844:	4620      	mov	r0, r4
   b4846:	f000 ff83 	bl	b5750 <_ZN9TCPClient9availableEv>
   b484a:	2800      	cmp	r0, #0
   b484c:	d0e0      	beq.n	b4810 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b484e:	f107 0113 	add.w	r1, r7, #19
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff fd34 	bl	b42c0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4858:	4683      	mov	fp, r0
   b485a:	2800      	cmp	r0, #0
   b485c:	d0d8      	beq.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b485e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4860:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4862:	7819      	ldrb	r1, [r3, #0]
   b4864:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4868:	2a30      	cmp	r2, #48	; 0x30
   b486a:	d17f      	bne.n	b496c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b486c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4870:	f1ba 0f00 	cmp.w	sl, #0
   b4874:	d0cc      	beq.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4876:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b487a:	466a      	mov	r2, sp
   b487c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4880:	eb03 020c 	add.w	r2, r3, ip
   b4884:	7851      	ldrb	r1, [r2, #1]
   b4886:	7895      	ldrb	r5, [r2, #2]
   b4888:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b488c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b488e:	f105 0208 	add.w	r2, r5, #8
   b4892:	4669      	mov	r1, sp
   b4894:	08d2      	lsrs	r2, r2, #3
   b4896:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b489a:	4695      	mov	sp, r2
   b489c:	f10c 0203 	add.w	r2, ip, #3
   b48a0:	60fa      	str	r2, [r7, #12]
   b48a2:	eb03 0e02 	add.w	lr, r3, r2
   b48a6:	eb0d 0205 	add.w	r2, sp, r5
   b48aa:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b48ac:	f8c7 d008 	str.w	sp, [r7, #8]
   b48b0:	607a      	str	r2, [r7, #4]
   b48b2:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b48b6:	428a      	cmp	r2, r1
   b48b8:	d006      	beq.n	b48c8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b48ba:	460a      	mov	r2, r1
   b48bc:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b48c0:	f802 8b01 	strb.w	r8, [r2], #1
   b48c4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b48c6:	e7f4      	b.n	b48b2 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b48c8:	2200      	movs	r2, #0
   b48ca:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b48cc:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b48d0:	68f9      	ldr	r1, [r7, #12]
   b48d2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b48d6:	ebab 020c 	sub.w	r2, fp, ip
   b48da:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b48dc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b48e0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b48e4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b48e6:	d125      	bne.n	b4934 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b48e8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b48ec:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b48ee:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b48f0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b48f4:	f10c 0105 	add.w	r1, ip, #5
   b48f8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b48fa:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b48fc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4900:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4902:	69e3      	ldr	r3, [r4, #28]
   b4904:	2240      	movs	r2, #64	; 0x40
   b4906:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4908:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b490a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b490e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4912:	69e3      	ldr	r3, [r4, #28]
   b4914:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4918:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b491a:	69e3      	ldr	r3, [r4, #28]
   b491c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4920:	69e1      	ldr	r1, [r4, #28]
   b4922:	2204      	movs	r2, #4
   b4924:	4620      	mov	r0, r4
   b4926:	f000 fce8 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b492a:	6266      	str	r6, [r4, #36]	; 0x24
   b492c:	ee18 3a10 	vmov	r3, s16
   b4930:	469d      	mov	sp, r3
   b4932:	e76d      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4934:	f1b8 0f04 	cmp.w	r8, #4
   b4938:	d115      	bne.n	b4966 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b493a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b493e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4940:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4942:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4946:	f10c 0105 	add.w	r1, ip, #5
   b494a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b494c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b494e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4952:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4954:	69e3      	ldr	r3, [r4, #28]
   b4956:	2250      	movs	r2, #80	; 0x50
   b4958:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b495a:	69e3      	ldr	r3, [r4, #28]
   b495c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b495e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4962:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4964:	e7d5      	b.n	b4912 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4966:	4419      	add	r1, r3
   b4968:	47d0      	blx	sl
   b496a:	e7df      	b.n	b492c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b496c:	2a50      	cmp	r2, #80	; 0x50
   b496e:	d108      	bne.n	b4982 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4970:	789a      	ldrb	r2, [r3, #2]
   b4972:	78d9      	ldrb	r1, [r3, #3]
   b4974:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4978:	b289      	uxth	r1, r1
   b497a:	4620      	mov	r0, r4
   b497c:	f7ff fed9 	bl	b4732 <_ZN4MQTT14publishReleaseEt>
   b4980:	e746      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4982:	2a40      	cmp	r2, #64	; 0x40
   b4984:	d112      	bne.n	b49ac <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4986:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4988:	2a00      	cmp	r2, #0
   b498a:	f43f af41 	beq.w	b4810 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b498e:	f1bb 0f04 	cmp.w	fp, #4
   b4992:	f47f af3d 	bne.w	b4810 <_ZN4MQTT4loopEv+0x4e>
   b4996:	f011 0f06 	tst.w	r1, #6
   b499a:	f47f af39 	bne.w	b4810 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b499e:	7899      	ldrb	r1, [r3, #2]
   b49a0:	78d8      	ldrb	r0, [r3, #3]
   b49a2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b49a6:	b280      	uxth	r0, r0
   b49a8:	4790      	blx	r2
   b49aa:	e731      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b49ac:	2a60      	cmp	r2, #96	; 0x60
   b49ae:	d108      	bne.n	b49c2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b49b0:	789a      	ldrb	r2, [r3, #2]
   b49b2:	78d9      	ldrb	r1, [r3, #3]
   b49b4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b49b8:	b289      	uxth	r1, r1
   b49ba:	4620      	mov	r0, r4
   b49bc:	f7ff fedd 	bl	b477a <_ZN4MQTT15publishCompleteEt>
   b49c0:	e726      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b49c2:	2a70      	cmp	r2, #112	; 0x70
   b49c4:	d0df      	beq.n	b4986 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b49c6:	2a90      	cmp	r2, #144	; 0x90
   b49c8:	f43f af22 	beq.w	b4810 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b49cc:	2ac0      	cmp	r2, #192	; 0xc0
   b49ce:	d10a      	bne.n	b49e6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b49d0:	22d0      	movs	r2, #208	; 0xd0
   b49d2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b49d4:	69e3      	ldr	r3, [r4, #28]
   b49d6:	2200      	movs	r2, #0
   b49d8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b49da:	69e1      	ldr	r1, [r4, #28]
   b49dc:	2202      	movs	r2, #2
   b49de:	4620      	mov	r0, r4
   b49e0:	f000 fc8b 	bl	b52fa <_ZN9TCPClient5writeEPKhj>
   b49e4:	e714      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b49e6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b49e8:	bf04      	itt	eq
   b49ea:	2300      	moveq	r3, #0
   b49ec:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b49f0:	e70e      	b.n	b4810 <_ZN4MQTT4loopEv+0x4e>

000b49f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b49f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b49f4:	4604      	mov	r4, r0
   b49f6:	460f      	mov	r7, r1
   b49f8:	4616      	mov	r6, r2
    if (isConnected()) {
   b49fa:	f7ff fd0b 	bl	b4414 <_ZN4MQTT11isConnectedEv>
   b49fe:	4605      	mov	r5, r0
   b4a00:	b310      	cbz	r0, b4a48 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4a02:	4621      	mov	r1, r4
   b4a04:	a801      	add	r0, sp, #4
   b4a06:	f7ff fbe5 	bl	b41d4 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4a0a:	8c23      	ldrh	r3, [r4, #32]
   b4a0c:	3301      	adds	r3, #1
   b4a0e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4a10:	b1eb      	cbz	r3, b4a4e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4a12:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4a14:	8c23      	ldrh	r3, [r4, #32]
   b4a16:	69e2      	ldr	r2, [r4, #28]
   b4a18:	0a1b      	lsrs	r3, r3, #8
   b4a1a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4a1c:	69e3      	ldr	r3, [r4, #28]
   b4a1e:	8c22      	ldrh	r2, [r4, #32]
   b4a20:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4a22:	69e2      	ldr	r2, [r4, #28]
   b4a24:	2307      	movs	r3, #7
   b4a26:	4639      	mov	r1, r7
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f7ff fcd7 	bl	b43dc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4a2e:	69e3      	ldr	r3, [r4, #28]
   b4a30:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4a32:	3804      	subs	r0, #4
   b4a34:	b283      	uxth	r3, r0
   b4a36:	69e2      	ldr	r2, [r4, #28]
   b4a38:	2182      	movs	r1, #130	; 0x82
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	f7ff fc92 	bl	b4364 <_ZN4MQTT5writeEhPht>
   b4a40:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4a42:	a801      	add	r0, sp, #4
   b4a44:	f7ff fbd1 	bl	b41ea <_ZN4MQTT11MutexLockerD1Ev>
}
   b4a48:	4628      	mov	r0, r5
   b4a4a:	b003      	add	sp, #12
   b4a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4a4e:	2301      	movs	r3, #1
   b4a50:	e7df      	b.n	b4a12 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4a52 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4a52:	2200      	movs	r2, #0
   b4a54:	f7ff bfcd 	b.w	b49f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4a58 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <os_mutex_create+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030248 	.word	0x00030248

000b4a68 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <os_mutex_lock+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	00030248 	.word	0x00030248

000b4a78 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <os_mutex_unlock+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	00030248 	.word	0x00030248

000b4a88 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <os_mutex_recursive_create+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	00030248 	.word	0x00030248

000b4a98 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <HAL_RNG_GetRandomNumber+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	685b      	ldr	r3, [r3, #4]
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	00030218 	.word	0x00030218

000b4aa8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	695b      	ldr	r3, [r3, #20]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	00030218 	.word	0x00030218

000b4ab8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <if_index_to_name+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	695b      	ldr	r3, [r3, #20]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003026c 	.word	0x0003026c

000b4ac8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <inet_inet_ntop+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	695b      	ldr	r3, [r3, #20]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	00030264 	.word	0x00030264

000b4ad8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <inet_htonl+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	6a1b      	ldr	r3, [r3, #32]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	00030264 	.word	0x00030264

000b4ae8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <inet_htons+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	00030264 	.word	0x00030264

000b4af8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <netdb_freeaddrinfo+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	689b      	ldr	r3, [r3, #8]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030268 	.word	0x00030268

000b4b08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <netdb_getaddrinfo+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	68db      	ldr	r3, [r3, #12]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030268 	.word	0x00030268

000b4b18 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <sock_setsockopt+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	699b      	ldr	r3, [r3, #24]
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030238 	.word	0x00030238

000b4b28 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <sock_close+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	69db      	ldr	r3, [r3, #28]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030238 	.word	0x00030238

000b4b38 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <sock_connect+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	6a1b      	ldr	r3, [r3, #32]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030238 	.word	0x00030238

000b4b48 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <sock_recv+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030238 	.word	0x00030238

000b4b58 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <sock_send+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030238 	.word	0x00030238

000b4b68 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <sock_socket+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030238 	.word	0x00030238

000b4b78 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <hal_usart_write+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	68db      	ldr	r3, [r3, #12]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	0003023c 	.word	0x0003023c

000b4b88 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <hal_usart_available+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	691b      	ldr	r3, [r3, #16]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	0003023c 	.word	0x0003023c

000b4b98 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <hal_usart_read+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	695b      	ldr	r3, [r3, #20]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	0003023c 	.word	0x0003023c

000b4ba8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <hal_usart_peek+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	699b      	ldr	r3, [r3, #24]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	0003023c 	.word	0x0003023c

000b4bb8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <hal_usart_flush+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	69db      	ldr	r3, [r3, #28]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003023c 	.word	0x0003023c

000b4bc8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <hal_usart_available_data_for_write+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	0003023c 	.word	0x0003023c

000b4bd8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_usart_init_ex+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	0003023c 	.word	0x0003023c

000b4be8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <HAL_USB_USART_Init+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	681b      	ldr	r3, [r3, #0]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	0003024c 	.word	0x0003024c

000b4bf8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <HAL_USB_USART_Available_Data+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	691b      	ldr	r3, [r3, #16]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	0003024c 	.word	0x0003024c

000b4c08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	695b      	ldr	r3, [r3, #20]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	0003024c 	.word	0x0003024c

000b4c18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <HAL_USB_USART_Receive_Data+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	699b      	ldr	r3, [r3, #24]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	0003024c 	.word	0x0003024c

000b4c28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <HAL_USB_USART_Send_Data+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	69db      	ldr	r3, [r3, #28]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	0003024c 	.word	0x0003024c

000b4c38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <HAL_USB_USART_Flush_Data+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6a1b      	ldr	r3, [r3, #32]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	0003024c 	.word	0x0003024c

000b4c48 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <log_message+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030260 	.word	0x00030260

000b4c58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <set_system_mode+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	685b      	ldr	r3, [r3, #4]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030220 	.word	0x00030220

000b4c68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <system_delay_ms+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	695b      	ldr	r3, [r3, #20]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030220 	.word	0x00030220

000b4c78 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <system_thread_set_state+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030220 	.word	0x00030220

000b4c88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b03      	ldr	r3, [pc, #12]	; (b4c98 <system_ctrl_set_app_request_handler+0x10>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c92:	9301      	str	r3, [sp, #4]
   b4c94:	bd08      	pop	{r3, pc}
   b4c96:	0000      	.short	0x0000
   b4c98:	00030220 	.word	0x00030220

000b4c9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b03      	ldr	r3, [pc, #12]	; (b4cac <system_ctrl_set_result+0x10>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ca6:	9301      	str	r3, [sp, #4]
   b4ca8:	bd08      	pop	{r3, pc}
   b4caa:	0000      	.short	0x0000
   b4cac:	00030220 	.word	0x00030220

000b4cb0 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <spark_deviceID+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	69db      	ldr	r3, [r3, #28]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030244 	.word	0x00030244

000b4cc0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030244 	.word	0x00030244

000b4cd0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <network_connect+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	685b      	ldr	r3, [r3, #4]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030240 	.word	0x00030240

000b4ce0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <network_connecting+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	689b      	ldr	r3, [r3, #8]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030240 	.word	0x00030240

000b4cf0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <network_disconnect+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	68db      	ldr	r3, [r3, #12]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030240 	.word	0x00030240

000b4d00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <network_ready+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	691b      	ldr	r3, [r3, #16]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030240 	.word	0x00030240

000b4d10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <network_on+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	695b      	ldr	r3, [r3, #20]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030240 	.word	0x00030240

000b4d20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <network_off+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	699b      	ldr	r3, [r3, #24]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030240 	.word	0x00030240

000b4d30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <network_listen+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	69db      	ldr	r3, [r3, #28]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030240 	.word	0x00030240

000b4d40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <network_listening+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	6a1b      	ldr	r3, [r3, #32]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030240 	.word	0x00030240

000b4d50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <network_set_listen_timeout+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030240 	.word	0x00030240

000b4d60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <network_get_listen_timeout+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030240 	.word	0x00030240

000b4d70 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <network_is_on+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030240 	.word	0x00030240

000b4d80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <network_is_off+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	00030240 	.word	0x00030240

000b4d90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <malloc+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	681b      	ldr	r3, [r3, #0]
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	0003021c 	.word	0x0003021c

000b4da0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <free+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	685b      	ldr	r3, [r3, #4]
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	0003021c 	.word	0x0003021c

000b4db0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <realloc+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	689b      	ldr	r3, [r3, #8]
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	0003021c 	.word	0x0003021c

000b4dc0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <__errno+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	0003021c 	.word	0x0003021c

000b4dd0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <__assert_func+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	0003021c 	.word	0x0003021c

000b4de0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <newlib_impure_ptr_callback+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	0003021c 	.word	0x0003021c

000b4df0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4df0:	2100      	movs	r1, #0
   b4df2:	f7ff bf39 	b.w	b4c68 <system_delay_ms>
	...

000b4df8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4df8:	4802      	ldr	r0, [pc, #8]	; (b4e04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4dfa:	2300      	movs	r3, #0
   b4dfc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4dfe:	f7ff be43 	b.w	b4a88 <os_mutex_recursive_create>
   b4e02:	bf00      	nop
   b4e04:	2003e6dc 	.word	0x2003e6dc

000b4e08 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e08:	2200      	movs	r2, #0
   b4e0a:	6840      	ldr	r0, [r0, #4]
   b4e0c:	4611      	mov	r1, r2
   b4e0e:	f7ff bf97 	b.w	b4d40 <network_listening>

000b4e12 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e12:	2200      	movs	r2, #0
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	4611      	mov	r1, r2
   b4e18:	f7ff bfa2 	b.w	b4d60 <network_get_listen_timeout>

000b4e1c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e1c:	6840      	ldr	r0, [r0, #4]
   b4e1e:	2200      	movs	r2, #0
   b4e20:	f7ff bf96 	b.w	b4d50 <network_set_listen_timeout>

000b4e24 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e24:	6840      	ldr	r0, [r0, #4]
   b4e26:	2200      	movs	r2, #0
   b4e28:	f081 0101 	eor.w	r1, r1, #1
   b4e2c:	f7ff bf80 	b.w	b4d30 <network_listen>

000b4e30 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e30:	2300      	movs	r3, #0
   b4e32:	6840      	ldr	r0, [r0, #4]
   b4e34:	461a      	mov	r2, r3
   b4e36:	4619      	mov	r1, r3
   b4e38:	f7ff bf72 	b.w	b4d20 <network_off>

000b4e3c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6840      	ldr	r0, [r0, #4]
   b4e40:	461a      	mov	r2, r3
   b4e42:	4619      	mov	r1, r3
   b4e44:	f7ff bf64 	b.w	b4d10 <network_on>

000b4e48 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e48:	2200      	movs	r2, #0
   b4e4a:	6840      	ldr	r0, [r0, #4]
   b4e4c:	4611      	mov	r1, r2
   b4e4e:	f7ff bf57 	b.w	b4d00 <network_ready>

000b4e52 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e52:	2200      	movs	r2, #0
   b4e54:	6840      	ldr	r0, [r0, #4]
   b4e56:	4611      	mov	r1, r2
   b4e58:	f7ff bf42 	b.w	b4ce0 <network_connecting>

000b4e5c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e5c:	6840      	ldr	r0, [r0, #4]
   b4e5e:	2200      	movs	r2, #0
   b4e60:	2102      	movs	r1, #2
   b4e62:	f7ff bf45 	b.w	b4cf0 <network_disconnect>

000b4e66 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e66:	2300      	movs	r3, #0
   b4e68:	6840      	ldr	r0, [r0, #4]
   b4e6a:	461a      	mov	r2, r3
   b4e6c:	f7ff bf30 	b.w	b4cd0 <network_connect>

000b4e70 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e70:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e72:	2203      	movs	r2, #3
   b4e74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e76:	4a02      	ldr	r2, [pc, #8]	; (b4e80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e78:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e7a:	4770      	bx	lr
   b4e7c:	2003e6e0 	.word	0x2003e6e0
   b4e80:	000b624c 	.word	0x000b624c

000b4e84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e84:	4770      	bx	lr

000b4e86 <_ZN9IPAddressD0Ev>:
   b4e86:	b510      	push	{r4, lr}
   b4e88:	2118      	movs	r1, #24
   b4e8a:	4604      	mov	r4, r0
   b4e8c:	f7ff f919 	bl	b40c2 <_ZdlPvj>
   b4e90:	4620      	mov	r0, r4
   b4e92:	bd10      	pop	{r4, pc}

000b4e94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e96:	7d03      	ldrb	r3, [r0, #20]
   b4e98:	2b06      	cmp	r3, #6
{
   b4e9a:	b08d      	sub	sp, #52	; 0x34
   b4e9c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e9e:	f100 0704 	add.w	r7, r0, #4
   b4ea2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4ea6:	d012      	beq.n	b4ece <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ea8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4eac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4eb0:	220a      	movs	r2, #10
   b4eb2:	4630      	mov	r0, r6
   b4eb4:	f000 f959 	bl	b516a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eb8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4eba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ebc:	d019      	beq.n	b4ef2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4ebe:	2c00      	cmp	r4, #0
   b4ec0:	d0f4      	beq.n	b4eac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4ec2:	212e      	movs	r1, #46	; 0x2e
   b4ec4:	4630      	mov	r0, r6
   b4ec6:	f000 f94d 	bl	b5164 <_ZN5Print5printEc>
   b4eca:	4404      	add	r4, r0
   b4ecc:	e7ee      	b.n	b4eac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ece:	232f      	movs	r3, #47	; 0x2f
   b4ed0:	466a      	mov	r2, sp
   b4ed2:	4639      	mov	r1, r7
   b4ed4:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ed6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4eda:	f7ff fdf5 	bl	b4ac8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ede:	4668      	mov	r0, sp
   b4ee0:	f7ff f8a6 	bl	b4030 <strlen>
   b4ee4:	6833      	ldr	r3, [r6, #0]
   b4ee6:	4602      	mov	r2, r0
   b4ee8:	68db      	ldr	r3, [r3, #12]
   b4eea:	4669      	mov	r1, sp
   b4eec:	4630      	mov	r0, r6
   b4eee:	4798      	blx	r3
   b4ef0:	4604      	mov	r4, r0
    }
    return n;
}
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	b00d      	add	sp, #52	; 0x34
   b4ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ef8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ef8:	b510      	push	{r4, lr}
   b4efa:	4b05      	ldr	r3, [pc, #20]	; (b4f10 <_ZN9IPAddressC1Ev+0x18>)
   b4efc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4efe:	2211      	movs	r2, #17
   b4f00:	f840 3b04 	str.w	r3, [r0], #4
   b4f04:	2100      	movs	r1, #0
   b4f06:	f001 f849 	bl	b5f9c <memset>
}
   b4f0a:	4620      	mov	r0, r4
   b4f0c:	bd10      	pop	{r4, pc}
   b4f0e:	bf00      	nop
   b4f10:	000b6288 	.word	0x000b6288

000b4f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f14:	4603      	mov	r3, r0
   b4f16:	4a07      	ldr	r2, [pc, #28]	; (b4f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f18:	b510      	push	{r4, lr}
   b4f1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f1e:	f101 0210 	add.w	r2, r1, #16
   b4f22:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f26:	f843 4b04 	str.w	r4, [r3], #4
   b4f2a:	4291      	cmp	r1, r2
   b4f2c:	d1f9      	bne.n	b4f22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f2e:	780a      	ldrb	r2, [r1, #0]
   b4f30:	701a      	strb	r2, [r3, #0]
}
   b4f32:	bd10      	pop	{r4, pc}
   b4f34:	000b6288 	.word	0x000b6288

000b4f38 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4f38:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4f3a:	2b04      	cmp	r3, #4
   b4f3c:	d104      	bne.n	b4f48 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4f3e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4f40:	3800      	subs	r0, #0
   b4f42:	bf18      	it	ne
   b4f44:	2001      	movne	r0, #1
   b4f46:	4770      	bx	lr
    } else if (version() == 6) {
   b4f48:	2b06      	cmp	r3, #6
   b4f4a:	d107      	bne.n	b4f5c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4f4c:	6843      	ldr	r3, [r0, #4]
   b4f4e:	b93b      	cbnz	r3, b4f60 <_ZNK9IPAddresscvbEv+0x28>
   b4f50:	6883      	ldr	r3, [r0, #8]
   b4f52:	b92b      	cbnz	r3, b4f60 <_ZNK9IPAddresscvbEv+0x28>
   b4f54:	68c3      	ldr	r3, [r0, #12]
   b4f56:	b91b      	cbnz	r3, b4f60 <_ZNK9IPAddresscvbEv+0x28>
   b4f58:	6900      	ldr	r0, [r0, #16]
   b4f5a:	e7f1      	b.n	b4f40 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4f5c:	2000      	movs	r0, #0
   b4f5e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4f60:	2001      	movs	r0, #1
}
   b4f62:	4770      	bx	lr

000b4f64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f76:	2304      	movs	r3, #4
   b4f78:	6041      	str	r1, [r0, #4]
   b4f7a:	7503      	strb	r3, [r0, #20]
}
   b4f7c:	bd10      	pop	{r4, pc}
	...

000b4f80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f80:	b507      	push	{r0, r1, r2, lr}
   b4f82:	4b06      	ldr	r3, [pc, #24]	; (b4f9c <_ZN9IPAddressC1EPKh+0x1c>)
   b4f84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f86:	78cb      	ldrb	r3, [r1, #3]
   b4f88:	9300      	str	r3, [sp, #0]
   b4f8a:	788b      	ldrb	r3, [r1, #2]
   b4f8c:	784a      	ldrb	r2, [r1, #1]
   b4f8e:	7809      	ldrb	r1, [r1, #0]
   b4f90:	f7ff ffe8 	bl	b4f64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f94:	b003      	add	sp, #12
   b4f96:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f9a:	bf00      	nop
   b4f9c:	000b6288 	.word	0x000b6288

000b4fa0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4fa0:	4b01      	ldr	r3, [pc, #4]	; (b4fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4fa2:	4a02      	ldr	r2, [pc, #8]	; (b4fac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4fa4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4fa6:	4770      	bx	lr
   b4fa8:	2003e6e8 	.word	0x2003e6e8
   b4fac:	000b6294 	.word	0x000b6294

000b4fb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4fb0:	2300      	movs	r3, #0
   b4fb2:	6840      	ldr	r0, [r0, #4]
   b4fb4:	461a      	mov	r2, r3
   b4fb6:	f7ff be8b 	b.w	b4cd0 <network_connect>

000b4fba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4fba:	6840      	ldr	r0, [r0, #4]
   b4fbc:	2200      	movs	r2, #0
   b4fbe:	2102      	movs	r1, #2
   b4fc0:	f7ff be96 	b.w	b4cf0 <network_disconnect>

000b4fc4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4fc4:	2200      	movs	r2, #0
   b4fc6:	6840      	ldr	r0, [r0, #4]
   b4fc8:	4611      	mov	r1, r2
   b4fca:	f7ff be89 	b.w	b4ce0 <network_connecting>

000b4fce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4fce:	2200      	movs	r2, #0
   b4fd0:	6840      	ldr	r0, [r0, #4]
   b4fd2:	4611      	mov	r1, r2
   b4fd4:	f7ff be94 	b.w	b4d00 <network_ready>

000b4fd8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4fd8:	2300      	movs	r3, #0
   b4fda:	6840      	ldr	r0, [r0, #4]
   b4fdc:	461a      	mov	r2, r3
   b4fde:	4619      	mov	r1, r3
   b4fe0:	f7ff be96 	b.w	b4d10 <network_on>

000b4fe4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4fe4:	2300      	movs	r3, #0
   b4fe6:	6840      	ldr	r0, [r0, #4]
   b4fe8:	461a      	mov	r2, r3
   b4fea:	4619      	mov	r1, r3
   b4fec:	f7ff be98 	b.w	b4d20 <network_off>

000b4ff0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4ff0:	6840      	ldr	r0, [r0, #4]
   b4ff2:	2100      	movs	r1, #0
   b4ff4:	f7ff bebc 	b.w	b4d70 <network_is_on>

000b4ff8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4ff8:	6840      	ldr	r0, [r0, #4]
   b4ffa:	2100      	movs	r1, #0
   b4ffc:	f7ff bec0 	b.w	b4d80 <network_is_off>

000b5000 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5000:	6840      	ldr	r0, [r0, #4]
   b5002:	2200      	movs	r2, #0
   b5004:	f081 0101 	eor.w	r1, r1, #1
   b5008:	f7ff be92 	b.w	b4d30 <network_listen>

000b500c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b500c:	6840      	ldr	r0, [r0, #4]
   b500e:	2200      	movs	r2, #0
   b5010:	f7ff be9e 	b.w	b4d50 <network_set_listen_timeout>

000b5014 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5014:	2200      	movs	r2, #0
   b5016:	6840      	ldr	r0, [r0, #4]
   b5018:	4611      	mov	r1, r2
   b501a:	f7ff bea1 	b.w	b4d60 <network_get_listen_timeout>

000b501e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b501e:	2200      	movs	r2, #0
   b5020:	6840      	ldr	r0, [r0, #4]
   b5022:	4611      	mov	r1, r2
   b5024:	f7ff be8c 	b.w	b4d40 <network_listening>

000b5028 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b502c:	b095      	sub	sp, #84	; 0x54
   b502e:	4614      	mov	r4, r2
   b5030:	460d      	mov	r5, r1
   b5032:	4607      	mov	r7, r0
    IPAddress addr;
   b5034:	f7ff ff60 	bl	b4ef8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5038:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b503a:	221c      	movs	r2, #28
   b503c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b503e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5040:	f000 ffac 	bl	b5f9c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5044:	2340      	movs	r3, #64	; 0x40
   b5046:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5048:	4620      	mov	r0, r4
   b504a:	466b      	mov	r3, sp
   b504c:	aa0c      	add	r2, sp, #48	; 0x30
   b504e:	2100      	movs	r1, #0
   b5050:	f7ff fd5a 	bl	b4b08 <netdb_getaddrinfo>
    if (!r) {
   b5054:	4604      	mov	r4, r0
   b5056:	2800      	cmp	r0, #0
   b5058:	d14b      	bne.n	b50f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b505a:	4602      	mov	r2, r0
   b505c:	2101      	movs	r1, #1
   b505e:	6868      	ldr	r0, [r5, #4]
   b5060:	f7ff fe4e 	bl	b4d00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5064:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5066:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5068:	4622      	mov	r2, r4
   b506a:	6868      	ldr	r0, [r5, #4]
   b506c:	f7ff fe48 	bl	b4d00 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5070:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5072:	4681      	mov	r9, r0
        bool ok = false;
   b5074:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5076:	2e00      	cmp	r6, #0
   b5078:	d03b      	beq.n	b50f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b507a:	2900      	cmp	r1, #0
   b507c:	d139      	bne.n	b50f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b507e:	6873      	ldr	r3, [r6, #4]
   b5080:	2b02      	cmp	r3, #2
   b5082:	d003      	beq.n	b508c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5084:	2b0a      	cmp	r3, #10
   b5086:	d011      	beq.n	b50ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5088:	69f6      	ldr	r6, [r6, #28]
   b508a:	e7f4      	b.n	b5076 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b508c:	f1b8 0f00 	cmp.w	r8, #0
   b5090:	d0fa      	beq.n	b5088 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5092:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5094:	a806      	add	r0, sp, #24
   b5096:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5098:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b509a:	f7ff ff71 	bl	b4f80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b509e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50a0:	1d3c      	adds	r4, r7, #4
   b50a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50a4:	682b      	ldr	r3, [r5, #0]
   b50a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b50aa:	e7ed      	b.n	b5088 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b50ac:	f1b9 0f00 	cmp.w	r9, #0
   b50b0:	d0ea      	beq.n	b5088 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b50b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b50b4:	2210      	movs	r2, #16
   b50b6:	a801      	add	r0, sp, #4
   b50b8:	f000 ff70 	bl	b5f9c <memset>
                    a.v = 6;
   b50bc:	2306      	movs	r3, #6
   b50be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b50c2:	ad01      	add	r5, sp, #4
   b50c4:	f104 0308 	add.w	r3, r4, #8
   b50c8:	3418      	adds	r4, #24
   b50ca:	6818      	ldr	r0, [r3, #0]
   b50cc:	6859      	ldr	r1, [r3, #4]
   b50ce:	462a      	mov	r2, r5
   b50d0:	c203      	stmia	r2!, {r0, r1}
   b50d2:	3308      	adds	r3, #8
   b50d4:	42a3      	cmp	r3, r4
   b50d6:	4615      	mov	r5, r2
   b50d8:	d1f7      	bne.n	b50ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b50da:	a901      	add	r1, sp, #4
   b50dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b50de:	ad07      	add	r5, sp, #28
   b50e0:	f7ff ff18 	bl	b4f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b50e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50e6:	1d3c      	adds	r4, r7, #4
   b50e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50ea:	682b      	ldr	r3, [r5, #0]
   b50ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50ee:	4649      	mov	r1, r9
   b50f0:	e7ca      	b.n	b5088 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b50f2:	9800      	ldr	r0, [sp, #0]
   b50f4:	f7ff fd00 	bl	b4af8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b50f8:	4638      	mov	r0, r7
   b50fa:	b015      	add	sp, #84	; 0x54
   b50fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5100 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5100:	4b02      	ldr	r3, [pc, #8]	; (b510c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5102:	4a03      	ldr	r2, [pc, #12]	; (b5110 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5104:	601a      	str	r2, [r3, #0]
   b5106:	2200      	movs	r2, #0
   b5108:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b510a:	4770      	bx	lr
   b510c:	2003e6ec 	.word	0x2003e6ec
   b5110:	000b62a0 	.word	0x000b62a0

000b5114 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5116:	4606      	mov	r6, r0
   b5118:	460d      	mov	r5, r1
  size_t n = 0;
   b511a:	188f      	adds	r7, r1, r2
   b511c:	2400      	movs	r4, #0
  while (size--) {
   b511e:	42bd      	cmp	r5, r7
   b5120:	d00c      	beq.n	b513c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5122:	6833      	ldr	r3, [r6, #0]
   b5124:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5128:	689b      	ldr	r3, [r3, #8]
   b512a:	4630      	mov	r0, r6
   b512c:	4798      	blx	r3
     if (chunk>=0)
   b512e:	1e03      	subs	r3, r0, #0
   b5130:	db01      	blt.n	b5136 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5132:	441c      	add	r4, r3
  while (size--) {
   b5134:	e7f3      	b.n	b511e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5136:	2c00      	cmp	r4, #0
   b5138:	bf08      	it	eq
   b513a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b513c:	4620      	mov	r0, r4
   b513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5140 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5140:	b513      	push	{r0, r1, r4, lr}
   b5142:	4604      	mov	r4, r0
    }
   b5144:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5146:	b159      	cbz	r1, b5160 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5148:	9101      	str	r1, [sp, #4]
   b514a:	f7fe ff71 	bl	b4030 <strlen>
   b514e:	6823      	ldr	r3, [r4, #0]
   b5150:	9901      	ldr	r1, [sp, #4]
   b5152:	68db      	ldr	r3, [r3, #12]
   b5154:	4602      	mov	r2, r0
   b5156:	4620      	mov	r0, r4
    }
   b5158:	b002      	add	sp, #8
   b515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b515e:	4718      	bx	r3
    }
   b5160:	b002      	add	sp, #8
   b5162:	bd10      	pop	{r4, pc}

000b5164 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5164:	6803      	ldr	r3, [r0, #0]
   b5166:	689b      	ldr	r3, [r3, #8]
   b5168:	4718      	bx	r3

000b516a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b516a:	b530      	push	{r4, r5, lr}
   b516c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b516e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5170:	2a01      	cmp	r2, #1
  *str = '\0';
   b5172:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5176:	bf98      	it	ls
   b5178:	220a      	movls	r2, #10
   b517a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b517c:	460d      	mov	r5, r1
   b517e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5182:	fb01 5312 	mls	r3, r1, r2, r5
   b5186:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b518a:	2b09      	cmp	r3, #9
   b518c:	bf94      	ite	ls
   b518e:	3330      	addls	r3, #48	; 0x30
   b5190:	3337      	addhi	r3, #55	; 0x37
   b5192:	b2db      	uxtb	r3, r3
  } while(n);
   b5194:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5196:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b519a:	d9ef      	bls.n	b517c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b519c:	4621      	mov	r1, r4
   b519e:	f7ff ffcf 	bl	b5140 <_ZN5Print5writeEPKc>
}
   b51a2:	b00b      	add	sp, #44	; 0x2c
   b51a4:	bd30      	pop	{r4, r5, pc}
	...

000b51a8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b51a8:	4b01      	ldr	r3, [pc, #4]	; (b51b0 <_GLOBAL__sub_I_RGB+0x8>)
   b51aa:	2200      	movs	r2, #0
   b51ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b51ae:	4770      	bx	lr
   b51b0:	2003e6f4 	.word	0x2003e6f4

000b51b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b51b4:	b510      	push	{r4, lr}
   b51b6:	4604      	mov	r4, r0
{
	free(buffer);
   b51b8:	6800      	ldr	r0, [r0, #0]
   b51ba:	f7ff fdf1 	bl	b4da0 <free>
}
   b51be:	4620      	mov	r0, r4
   b51c0:	bd10      	pop	{r4, pc}

000b51c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b51c2:	b510      	push	{r4, lr}
   b51c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b51c6:	6800      	ldr	r0, [r0, #0]
   b51c8:	b108      	cbz	r0, b51ce <_ZN6String10invalidateEv+0xc>
   b51ca:	f7ff fde9 	bl	b4da0 <free>
	buffer = NULL;
   b51ce:	2300      	movs	r3, #0
	capacity = len = 0;
   b51d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b51d4:	6023      	str	r3, [r4, #0]
}
   b51d6:	bd10      	pop	{r4, pc}

000b51d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b51d8:	b538      	push	{r3, r4, r5, lr}
   b51da:	4604      	mov	r4, r0
   b51dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b51de:	6800      	ldr	r0, [r0, #0]
   b51e0:	3101      	adds	r1, #1
   b51e2:	f7ff fde5 	bl	b4db0 <realloc>
	if (newbuffer) {
   b51e6:	b110      	cbz	r0, b51ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b51e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b51ec:	2001      	movs	r0, #1
	}
	return 0;
}
   b51ee:	bd38      	pop	{r3, r4, r5, pc}

000b51f0 <_ZN6String7reserveEj>:
{
   b51f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b51f2:	6803      	ldr	r3, [r0, #0]
{
   b51f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b51f6:	b123      	cbz	r3, b5202 <_ZN6String7reserveEj+0x12>
   b51f8:	6843      	ldr	r3, [r0, #4]
   b51fa:	428b      	cmp	r3, r1
   b51fc:	d301      	bcc.n	b5202 <_ZN6String7reserveEj+0x12>
   b51fe:	2001      	movs	r0, #1
}
   b5200:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5202:	4620      	mov	r0, r4
   b5204:	f7ff ffe8 	bl	b51d8 <_ZN6String12changeBufferEj>
   b5208:	2800      	cmp	r0, #0
   b520a:	d0f9      	beq.n	b5200 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b520c:	68a3      	ldr	r3, [r4, #8]
   b520e:	2b00      	cmp	r3, #0
   b5210:	d1f5      	bne.n	b51fe <_ZN6String7reserveEj+0xe>
   b5212:	6822      	ldr	r2, [r4, #0]
   b5214:	7013      	strb	r3, [r2, #0]
   b5216:	e7f2      	b.n	b51fe <_ZN6String7reserveEj+0xe>

000b5218 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b521a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b521c:	4611      	mov	r1, r2
   b521e:	9201      	str	r2, [sp, #4]
{
   b5220:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5222:	f7ff ffe5 	bl	b51f0 <_ZN6String7reserveEj>
   b5226:	9a01      	ldr	r2, [sp, #4]
   b5228:	b928      	cbnz	r0, b5236 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b522a:	4620      	mov	r0, r4
   b522c:	f7ff ffc9 	bl	b51c2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5230:	4620      	mov	r0, r4
   b5232:	b003      	add	sp, #12
   b5234:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5236:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5238:	4629      	mov	r1, r5
   b523a:	6820      	ldr	r0, [r4, #0]
   b523c:	f000 fea0 	bl	b5f80 <memcpy>
	buffer[len] = 0;
   b5240:	6822      	ldr	r2, [r4, #0]
   b5242:	68a3      	ldr	r3, [r4, #8]
   b5244:	2100      	movs	r1, #0
   b5246:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5248:	e7f2      	b.n	b5230 <_ZN6String4copyEPKcj+0x18>

000b524a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b524a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b524c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b524e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5252:	4604      	mov	r4, r0
	len = 0;
   b5254:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5256:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5258:	b141      	cbz	r1, b526c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b525a:	4608      	mov	r0, r1
   b525c:	9101      	str	r1, [sp, #4]
   b525e:	f7fe fee7 	bl	b4030 <strlen>
   b5262:	9901      	ldr	r1, [sp, #4]
   b5264:	4602      	mov	r2, r0
   b5266:	4620      	mov	r0, r4
   b5268:	f7ff ffd6 	bl	b5218 <_ZN6String4copyEPKcj>
}
   b526c:	4620      	mov	r0, r4
   b526e:	b002      	add	sp, #8
   b5270:	bd10      	pop	{r4, pc}

000b5272 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5272:	b513      	push	{r0, r1, r4, lr}
   b5274:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5276:	b159      	cbz	r1, b5290 <_ZN6StringaSEPKc+0x1e>
   b5278:	4608      	mov	r0, r1
   b527a:	9101      	str	r1, [sp, #4]
   b527c:	f7fe fed8 	bl	b4030 <strlen>
   b5280:	9901      	ldr	r1, [sp, #4]
   b5282:	4602      	mov	r2, r0
   b5284:	4620      	mov	r0, r4
   b5286:	f7ff ffc7 	bl	b5218 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b528a:	4620      	mov	r0, r4
   b528c:	b002      	add	sp, #8
   b528e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5290:	f7ff ff97 	bl	b51c2 <_ZN6String10invalidateEv>
   b5294:	e7f9      	b.n	b528a <_ZN6StringaSEPKc+0x18>

000b5296 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5296:	b510      	push	{r4, lr}
   b5298:	4604      	mov	r4, r0
   b529a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b529c:	2300      	movs	r3, #0
	capacity = 0;
   b529e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b52a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b52a4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b52a6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b52a8:	a901      	add	r1, sp, #4
   b52aa:	f000 fc59 	bl	b5b60 <itoa>
	*this = buf;
   b52ae:	a901      	add	r1, sp, #4
   b52b0:	4620      	mov	r0, r4
   b52b2:	f7ff ffde 	bl	b5272 <_ZN6StringaSEPKc>
}
   b52b6:	4620      	mov	r0, r4
   b52b8:	b00a      	add	sp, #40	; 0x28
   b52ba:	bd10      	pop	{r4, pc}

000b52bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b52bc:	4b05      	ldr	r3, [pc, #20]	; (b52d4 <_GLOBAL__sub_I_System+0x18>)
   b52be:	2202      	movs	r2, #2
   b52c0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b52c2:	4b05      	ldr	r3, [pc, #20]	; (b52d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b52c4:	4a05      	ldr	r2, [pc, #20]	; (b52dc <_GLOBAL__sub_I_System+0x20>)
   b52c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b52c8:	2000      	movs	r0, #0
   b52ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b52ce:	f7ff bcc3 	b.w	b4c58 <set_system_mode>
   b52d2:	bf00      	nop
   b52d4:	2003e710 	.word	0x2003e710
   b52d8:	2003e704 	.word	0x2003e704
   b52dc:	ffff0000 	.word	0xffff0000

000b52e0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b52e0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b52e2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b52e4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b52e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b52ea:	2201      	movs	r2, #1
   b52ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b52f0:	f10d 0107 	add.w	r1, sp, #7
   b52f4:	47a0      	blx	r4
}
   b52f6:	b002      	add	sp, #8
   b52f8:	bd10      	pop	{r4, pc}

000b52fa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b52fa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b52fc:	6803      	ldr	r3, [r0, #0]
   b52fe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5304:	46a4      	mov	ip, r4
}
   b5306:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b530a:	4760      	bx	ip

000b530c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b530c:	b513      	push	{r0, r1, r4, lr}
   b530e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5310:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5312:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5316:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5318:	f10d 0107 	add.w	r1, sp, #7
   b531c:	2201      	movs	r2, #1
   b531e:	47a0      	blx	r4
}
   b5320:	b002      	add	sp, #8
   b5322:	bd10      	pop	{r4, pc}

000b5324 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5324:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5326:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5328:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b532c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5330:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5332:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5334:	d008      	beq.n	b5348 <_ZN9TCPClient4readEv+0x24>
   b5336:	6963      	ldr	r3, [r4, #20]
   b5338:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b533c:	1c51      	adds	r1, r2, #1
   b533e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5342:	4413      	add	r3, r2
   b5344:	7918      	ldrb	r0, [r3, #4]
}
   b5346:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5348:	6803      	ldr	r3, [r0, #0]
   b534a:	691b      	ldr	r3, [r3, #16]
   b534c:	4798      	blx	r3
   b534e:	2800      	cmp	r0, #0
   b5350:	d1f1      	bne.n	b5336 <_ZN9TCPClient4readEv+0x12>
   b5352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5356:	e7f6      	b.n	b5346 <_ZN9TCPClient4readEv+0x22>

000b5358 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5358:	4770      	bx	lr

000b535a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b535a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b535c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b535e:	43c0      	mvns	r0, r0
   b5360:	0fc0      	lsrs	r0, r0, #31
   b5362:	4770      	bx	lr

000b5364 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5364:	4770      	bx	lr
	...

000b5368 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5368:	4b06      	ldr	r3, [pc, #24]	; (b5384 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b536a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b536c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b536e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5372:	d005      	beq.n	b5380 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5374:	4608      	mov	r0, r1
   b5376:	f000 fce7 	bl	b5d48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b537a:	2800      	cmp	r0, #0
   b537c:	bf08      	it	eq
   b537e:	2400      	moveq	r4, #0
      }
   b5380:	4620      	mov	r0, r4
   b5382:	bd10      	pop	{r4, pc}
   b5384:	000b623c 	.word	0x000b623c

000b5388 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5388:	b510      	push	{r4, lr}
   b538a:	21ac      	movs	r1, #172	; 0xac
   b538c:	4604      	mov	r4, r0
   b538e:	f7fe fe98 	bl	b40c2 <_ZdlPvj>
   b5392:	4620      	mov	r0, r4
   b5394:	bd10      	pop	{r4, pc}

000b5396 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5396:	21ac      	movs	r1, #172	; 0xac
   b5398:	f7fe be93 	b.w	b40c2 <_ZdlPvj>

000b539c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b53a0:	f04f 0800 	mov.w	r8, #0
   b53a4:	b086      	sub	sp, #24
   b53a6:	461c      	mov	r4, r3
   b53a8:	f8c0 8004 	str.w	r8, [r0, #4]
   b53ac:	4605      	mov	r5, r0
   b53ae:	460e      	mov	r6, r1
   b53b0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b53b2:	4641      	mov	r1, r8
   b53b4:	2210      	movs	r2, #16
   b53b6:	a802      	add	r0, sp, #8
   b53b8:	f000 fdf0 	bl	b5f9c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b53bc:	1c63      	adds	r3, r4, #1
   b53be:	d009      	beq.n	b53d4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b53c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53c4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b53c8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b53cc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b53d0:	435c      	muls	r4, r3
   b53d2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b53d4:	6968      	ldr	r0, [r5, #20]
   b53d6:	2310      	movs	r3, #16
   b53d8:	9300      	str	r3, [sp, #0]
   b53da:	6800      	ldr	r0, [r0, #0]
   b53dc:	ab02      	add	r3, sp, #8
   b53de:	f241 0205 	movw	r2, #4101	; 0x1005
   b53e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b53e6:	f7ff fb97 	bl	b4b18 <sock_setsockopt>
    if (ret < 0) {
   b53ea:	2800      	cmp	r0, #0
   b53ec:	da07      	bge.n	b53fe <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b53ee:	f7ff fce7 	bl	b4dc0 <__errno>
   b53f2:	6803      	ldr	r3, [r0, #0]
   b53f4:	606b      	str	r3, [r5, #4]
        return 0;
   b53f6:	2000      	movs	r0, #0
}
   b53f8:	b006      	add	sp, #24
   b53fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b53fe:	6968      	ldr	r0, [r5, #20]
   b5400:	2300      	movs	r3, #0
   b5402:	6800      	ldr	r0, [r0, #0]
   b5404:	463a      	mov	r2, r7
   b5406:	4631      	mov	r1, r6
   b5408:	f7ff fba6 	bl	b4b58 <sock_send>
    if (ret < 0) {
   b540c:	1e03      	subs	r3, r0, #0
   b540e:	dbee      	blt.n	b53ee <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5410:	4618      	mov	r0, r3
   b5412:	e7f1      	b.n	b53f8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5414 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5414:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5416:	6984      	ldr	r4, [r0, #24]
   b5418:	4b0a      	ldr	r3, [pc, #40]	; (b5444 <_ZN9TCPClientD1Ev+0x30>)
   b541a:	6003      	str	r3, [r0, #0]
   b541c:	4605      	mov	r5, r0
   b541e:	b17c      	cbz	r4, b5440 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5420:	6863      	ldr	r3, [r4, #4]
   b5422:	3b01      	subs	r3, #1
   b5424:	6063      	str	r3, [r4, #4]
   b5426:	b95b      	cbnz	r3, b5440 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5428:	6823      	ldr	r3, [r4, #0]
   b542a:	4620      	mov	r0, r4
   b542c:	689b      	ldr	r3, [r3, #8]
   b542e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5430:	68a3      	ldr	r3, [r4, #8]
   b5432:	3b01      	subs	r3, #1
   b5434:	60a3      	str	r3, [r4, #8]
   b5436:	b91b      	cbnz	r3, b5440 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5438:	6823      	ldr	r3, [r4, #0]
   b543a:	4620      	mov	r0, r4
   b543c:	68db      	ldr	r3, [r3, #12]
   b543e:	4798      	blx	r3
   b5440:	4628      	mov	r0, r5
   b5442:	bd38      	pop	{r3, r4, r5, pc}
   b5444:	000b6310 	.word	0x000b6310

000b5448 <_ZN9TCPClientD0Ev>:
   b5448:	b510      	push	{r4, lr}
   b544a:	4604      	mov	r4, r0
   b544c:	f7ff ffe2 	bl	b5414 <_ZN9TCPClientD1Ev>
   b5450:	4620      	mov	r0, r4
   b5452:	211c      	movs	r1, #28
   b5454:	f7fe fe35 	bl	b40c2 <_ZdlPvj>
   b5458:	4620      	mov	r0, r4
   b545a:	bd10      	pop	{r4, pc}

000b545c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b545c:	b530      	push	{r4, r5, lr}
   b545e:	b087      	sub	sp, #28
   b5460:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5462:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5464:	4668      	mov	r0, sp
   b5466:	f7ff fd8b 	bl	b4f80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b546a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b546c:	3404      	adds	r4, #4
   b546e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5470:	682b      	ldr	r3, [r5, #0]
   b5472:	7023      	strb	r3, [r4, #0]
    }
   b5474:	b007      	add	sp, #28
   b5476:	bd30      	pop	{r4, r5, pc}

000b5478 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5478:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b547a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b547c:	4b05      	ldr	r3, [pc, #20]	; (b5494 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b547e:	4604      	mov	r4, r0
   b5480:	358c      	adds	r5, #140	; 0x8c
   b5482:	f844 3b04 	str.w	r3, [r4], #4
   b5486:	4606      	mov	r6, r0
   b5488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b548a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b548c:	682b      	ldr	r3, [r5, #0]
   b548e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5490:	4630      	mov	r0, r6
   b5492:	bd70      	pop	{r4, r5, r6, pc}
   b5494:	000b6288 	.word	0x000b6288

000b5498 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b549c:	4698      	mov	r8, r3
    stop();
   b549e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b54a0:	b093      	sub	sp, #76	; 0x4c
   b54a2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b54a4:	2400      	movs	r4, #0
    stop();
   b54a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b54a8:	4606      	mov	r6, r0
   b54aa:	4617      	mov	r7, r2
    stop();
   b54ac:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b54ae:	4628      	mov	r0, r5
   b54b0:	466b      	mov	r3, sp
   b54b2:	4622      	mov	r2, r4
   b54b4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b54b6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b54b8:	f7ff fb26 	bl	b4b08 <netdb_getaddrinfo>
   b54bc:	4605      	mov	r5, r0
   b54be:	2800      	cmp	r0, #0
   b54c0:	d163      	bne.n	b558a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b54c2:	9b00      	ldr	r3, [sp, #0]
   b54c4:	2b00      	cmp	r3, #0
   b54c6:	d04b      	beq.n	b5560 <_ZN9TCPClient7connectEPKctm+0xc8>
   b54c8:	695b      	ldr	r3, [r3, #20]
   b54ca:	2b00      	cmp	r3, #0
   b54cc:	d048      	beq.n	b5560 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b54ce:	a806      	add	r0, sp, #24
   b54d0:	f7ff fd12 	bl	b4ef8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b54d4:	9b00      	ldr	r3, [sp, #0]
   b54d6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b54d8:	7863      	ldrb	r3, [r4, #1]
   b54da:	2b02      	cmp	r3, #2
   b54dc:	d104      	bne.n	b54e8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b54de:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b54e0:	a806      	add	r0, sp, #24
   b54e2:	f7ff ffbb 	bl	b545c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b54e6:	e026      	b.n	b5536 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b54e8:	2b0a      	cmp	r3, #10
   b54ea:	d124      	bne.n	b5536 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b54ec:	2211      	movs	r2, #17
   b54ee:	4629      	mov	r1, r5
   b54f0:	a801      	add	r0, sp, #4
   b54f2:	f000 fd53 	bl	b5f9c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b54f6:	68a3      	ldr	r3, [r4, #8]
   b54f8:	2b00      	cmp	r3, #0
   b54fa:	d038      	beq.n	b556e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b54fc:	f104 0308 	add.w	r3, r4, #8
   b5500:	f10d 0c04 	add.w	ip, sp, #4
   b5504:	3418      	adds	r4, #24
   b5506:	6818      	ldr	r0, [r3, #0]
   b5508:	6859      	ldr	r1, [r3, #4]
   b550a:	4662      	mov	r2, ip
   b550c:	c203      	stmia	r2!, {r0, r1}
   b550e:	3308      	adds	r3, #8
   b5510:	42a3      	cmp	r3, r4
   b5512:	4694      	mov	ip, r2
   b5514:	d1f7      	bne.n	b5506 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5516:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5518:	a901      	add	r1, sp, #4
   b551a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b551c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5520:	f7ff fcf8 	bl	b4f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5524:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5528:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b552c:	ac07      	add	r4, sp, #28
   b552e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5530:	f8dc 3000 	ldr.w	r3, [ip]
   b5534:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5536:	a806      	add	r0, sp, #24
   b5538:	f7ff fcfe 	bl	b4f38 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b553c:	b180      	cbz	r0, b5560 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b553e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5540:	ad07      	add	r5, sp, #28
   b5542:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5546:	4b12      	ldr	r3, [pc, #72]	; (b5590 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5548:	930c      	str	r3, [sp, #48]	; 0x30
   b554a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b554c:	ac0d      	add	r4, sp, #52	; 0x34
   b554e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5550:	682b      	ldr	r3, [r5, #0]
   b5552:	7023      	strb	r3, [r4, #0]
   b5554:	463a      	mov	r2, r7
   b5556:	4643      	mov	r3, r8
   b5558:	a90c      	add	r1, sp, #48	; 0x30
   b555a:	4630      	mov	r0, r6
   b555c:	47c8      	blx	r9
   b555e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5560:	9800      	ldr	r0, [sp, #0]
   b5562:	f7ff fac9 	bl	b4af8 <netdb_freeaddrinfo>
}
   b5566:	4628      	mov	r0, r5
   b5568:	b013      	add	sp, #76	; 0x4c
   b556a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b556e:	68e3      	ldr	r3, [r4, #12]
   b5570:	2b00      	cmp	r3, #0
   b5572:	d1c3      	bne.n	b54fc <_ZN9TCPClient7connectEPKctm+0x64>
   b5574:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5578:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b557c:	f7ff faac 	bl	b4ad8 <inet_htonl>
   b5580:	4581      	cmp	r9, r0
   b5582:	d1bb      	bne.n	b54fc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5584:	f104 0114 	add.w	r1, r4, #20
   b5588:	e7aa      	b.n	b54e0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b558a:	4625      	mov	r5, r4
   b558c:	e7e8      	b.n	b5560 <_ZN9TCPClient7connectEPKctm+0xc8>
   b558e:	bf00      	nop
   b5590:	000b6288 	.word	0x000b6288

000b5594 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5594:	b538      	push	{r3, r4, r5, lr}
   b5596:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5598:	681a      	ldr	r2, [r3, #0]
   b559a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b559c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b559e:	da10      	bge.n	b55c2 <_ZN9TCPClient9connectedEv+0x2e>
   b55a0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b55a8:	429a      	cmp	r2, r3
   b55aa:	d10a      	bne.n	b55c2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b55ac:	6803      	ldr	r3, [r0, #0]
   b55ae:	691b      	ldr	r3, [r3, #16]
   b55b0:	4798      	blx	r3
        if (!rv) {
   b55b2:	4604      	mov	r4, r0
   b55b4:	b928      	cbnz	r0, b55c2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b55b6:	682b      	ldr	r3, [r5, #0]
   b55b8:	4628      	mov	r0, r5
   b55ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55bc:	4798      	blx	r3
        rv = available();
   b55be:	4620      	mov	r0, r4
}
   b55c0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b55c2:	2001      	movs	r0, #1
   b55c4:	e7fc      	b.n	b55c0 <_ZN9TCPClient9connectedEv+0x2c>

000b55c6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b55c6:	b510      	push	{r4, lr}
   b55c8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b55ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b55d2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b55d4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b55d6:	d005      	beq.n	b55e4 <_ZN9TCPClient4peekEv+0x1e>
   b55d8:	6963      	ldr	r3, [r4, #20]
   b55da:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b55de:	4413      	add	r3, r2
   b55e0:	7918      	ldrb	r0, [r3, #4]
}
   b55e2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b55e4:	6803      	ldr	r3, [r0, #0]
   b55e6:	691b      	ldr	r3, [r3, #16]
   b55e8:	4798      	blx	r3
   b55ea:	2800      	cmp	r0, #0
   b55ec:	d1f4      	bne.n	b55d8 <_ZN9TCPClient4peekEv+0x12>
   b55ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b55f2:	e7f6      	b.n	b55e2 <_ZN9TCPClient4peekEv+0x1c>

000b55f4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b55f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55f6:	6943      	ldr	r3, [r0, #20]
   b55f8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b55fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5602:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5604:	4605      	mov	r5, r0
   b5606:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5608:	d016      	beq.n	b5638 <_ZN9TCPClient4readEPhj+0x44>
   b560a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b560c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5610:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5614:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5616:	42bc      	cmp	r4, r7
   b5618:	bf28      	it	cs
   b561a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b561c:	3304      	adds	r3, #4
   b561e:	4622      	mov	r2, r4
   b5620:	4419      	add	r1, r3
   b5622:	4630      	mov	r0, r6
   b5624:	f000 fcac 	bl	b5f80 <memcpy>
   b5628:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b562a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b562e:	4423      	add	r3, r4
   b5630:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5634:	4620      	mov	r0, r4
   b5636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5638:	6803      	ldr	r3, [r0, #0]
   b563a:	691b      	ldr	r3, [r3, #16]
   b563c:	4798      	blx	r3
   b563e:	2800      	cmp	r0, #0
   b5640:	d1e3      	bne.n	b560a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5642:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5646:	e7f5      	b.n	b5634 <_ZN9TCPClient4readEPhj+0x40>

000b5648 <_ZN9TCPClient12flush_bufferEv>:
   b5648:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b564a:	2300      	movs	r3, #0
   b564c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5650:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5652:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5656:	4770      	bx	lr

000b5658 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b565c:	461f      	mov	r7, r3
    stop();
   b565e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5660:	460c      	mov	r4, r1
    stop();
   b5662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5664:	b08a      	sub	sp, #40	; 0x28
   b5666:	4605      	mov	r5, r0
   b5668:	4616      	mov	r6, r2
    stop();
   b566a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b566c:	7d23      	ldrb	r3, [r4, #20]
   b566e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5672:	2b04      	cmp	r3, #4
   b5674:	bf0c      	ite	eq
   b5676:	2002      	moveq	r0, #2
   b5678:	200a      	movne	r0, #10
   b567a:	2206      	movs	r2, #6
   b567c:	2101      	movs	r1, #1
   b567e:	f7ff fa73 	bl	b4b68 <sock_socket>
   b5682:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5686:	696b      	ldr	r3, [r5, #20]
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	2b00      	cmp	r3, #0
   b568c:	da08      	bge.n	b56a0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b568e:	682b      	ldr	r3, [r5, #0]
   b5690:	4628      	mov	r0, r5
   b5692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5694:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5696:	4798      	blx	r3
}
   b5698:	4620      	mov	r0, r4
   b569a:	b00a      	add	sp, #40	; 0x28
   b569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b56a0:	4628      	mov	r0, r5
   b56a2:	f7ff ffd1 	bl	b5648 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b56a6:	b1b7      	cbz	r7, b56d6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b56a8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b56aa:	a903      	add	r1, sp, #12
   b56ac:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b56ae:	9303      	str	r3, [sp, #12]
   b56b0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b56b4:	f7ff fa00 	bl	b4ab8 <if_index_to_name>
   b56b8:	2800      	cmp	r0, #0
   b56ba:	d1e8      	bne.n	b568e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b56bc:	6968      	ldr	r0, [r5, #20]
   b56be:	2306      	movs	r3, #6
   b56c0:	9300      	str	r3, [sp, #0]
   b56c2:	6800      	ldr	r0, [r0, #0]
   b56c4:	ab03      	add	r3, sp, #12
   b56c6:	f241 020b 	movw	r2, #4107	; 0x100b
   b56ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   b56ce:	f7ff fa23 	bl	b4b18 <sock_setsockopt>
   b56d2:	2800      	cmp	r0, #0
   b56d4:	d1db      	bne.n	b568e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b56d6:	221c      	movs	r2, #28
   b56d8:	2100      	movs	r1, #0
   b56da:	a803      	add	r0, sp, #12
   b56dc:	f000 fc5e 	bl	b5f9c <memset>
    if (ip.version() == 4) {
   b56e0:	7d23      	ldrb	r3, [r4, #20]
   b56e2:	2b04      	cmp	r3, #4
   b56e4:	d11d      	bne.n	b5722 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b56e6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b56ea:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b56ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b56f0:	f7ff f9fa 	bl	b4ae8 <inet_htons>
   b56f4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b56f8:	6860      	ldr	r0, [r4, #4]
   b56fa:	f7ff f9ed 	bl	b4ad8 <inet_htonl>
   b56fe:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5700:	696b      	ldr	r3, [r5, #20]
   b5702:	221c      	movs	r2, #28
   b5704:	6818      	ldr	r0, [r3, #0]
   b5706:	a903      	add	r1, sp, #12
   b5708:	f7ff fa16 	bl	b4b38 <sock_connect>
   b570c:	2800      	cmp	r0, #0
   b570e:	d1be      	bne.n	b568e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5710:	3404      	adds	r4, #4
   b5712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5714:	696d      	ldr	r5, [r5, #20]
   b5716:	358c      	adds	r5, #140	; 0x8c
   b5718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b571a:	6823      	ldr	r3, [r4, #0]
   b571c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b571e:	2401      	movs	r4, #1
   b5720:	e7ba      	b.n	b5698 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5722:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5726:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5728:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b572c:	f7ff f9dc 	bl	b4ae8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5730:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5732:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5736:	1d23      	adds	r3, r4, #4
   b5738:	f104 0714 	add.w	r7, r4, #20
   b573c:	6818      	ldr	r0, [r3, #0]
   b573e:	6859      	ldr	r1, [r3, #4]
   b5740:	4632      	mov	r2, r6
   b5742:	c203      	stmia	r2!, {r0, r1}
   b5744:	3308      	adds	r3, #8
   b5746:	42bb      	cmp	r3, r7
   b5748:	4616      	mov	r6, r2
   b574a:	d1f7      	bne.n	b573c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b574c:	e7d8      	b.n	b5700 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5750 <_ZN9TCPClient9availableEv>:
{
   b5750:	b530      	push	{r4, r5, lr}
   b5752:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5754:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5758:	b08b      	sub	sp, #44	; 0x2c
   b575a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b575c:	b12b      	cbz	r3, b576a <_ZN9TCPClient9availableEv+0x1a>
   b575e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5762:	429a      	cmp	r2, r3
   b5764:	d101      	bne.n	b576a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5766:	f7ff ff6f 	bl	b5648 <_ZN9TCPClient12flush_bufferEv>
   b576a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b576c:	6808      	ldr	r0, [r1, #0]
   b576e:	2800      	cmp	r0, #0
   b5770:	db18      	blt.n	b57a4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5772:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5776:	2d7f      	cmp	r5, #127	; 0x7f
   b5778:	d814      	bhi.n	b57a4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b577a:	3104      	adds	r1, #4
   b577c:	2308      	movs	r3, #8
   b577e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5782:	4429      	add	r1, r5
   b5784:	f7ff f9e0 	bl	b4b48 <sock_recv>
            if (ret > 0) {
   b5788:	2800      	cmp	r0, #0
   b578a:	dd13      	ble.n	b57b4 <_ZN9TCPClient9availableEv+0x64>
   b578c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b578e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5792:	b90a      	cbnz	r2, b5798 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5794:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5798:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b579a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b579e:	4410      	add	r0, r2
   b57a0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b57a4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b57a6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b57aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b57ae:	1ac0      	subs	r0, r0, r3
   b57b0:	b00b      	add	sp, #44	; 0x2c
   b57b2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b57b4:	f7ff fb04 	bl	b4dc0 <__errno>
   b57b8:	6803      	ldr	r3, [r0, #0]
   b57ba:	2b0b      	cmp	r3, #11
   b57bc:	d0f2      	beq.n	b57a4 <_ZN9TCPClient9availableEv+0x54>
   b57be:	f7ff faff 	bl	b4dc0 <__errno>
   b57c2:	6803      	ldr	r3, [r0, #0]
   b57c4:	2b0b      	cmp	r3, #11
   b57c6:	d0ed      	beq.n	b57a4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b57c8:	2320      	movs	r3, #32
   b57ca:	2500      	movs	r5, #0
   b57cc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b57d0:	f7ff faf6 	bl	b4dc0 <__errno>
   b57d4:	6803      	ldr	r3, [r0, #0]
   b57d6:	9301      	str	r3, [sp, #4]
   b57d8:	4b08      	ldr	r3, [pc, #32]	; (b57fc <_ZN9TCPClient9availableEv+0xac>)
   b57da:	4909      	ldr	r1, [pc, #36]	; (b5800 <_ZN9TCPClient9availableEv+0xb0>)
   b57dc:	9300      	str	r3, [sp, #0]
   b57de:	aa02      	add	r2, sp, #8
   b57e0:	462b      	mov	r3, r5
   b57e2:	2032      	movs	r0, #50	; 0x32
   b57e4:	f7ff fa30 	bl	b4c48 <log_message>
                    sock_close(d_->sock);
   b57e8:	6963      	ldr	r3, [r4, #20]
   b57ea:	6818      	ldr	r0, [r3, #0]
   b57ec:	f7ff f99c 	bl	b4b28 <sock_close>
   b57f0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b57f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b57f6:	601a      	str	r2, [r3, #0]
   b57f8:	e7d4      	b.n	b57a4 <_ZN9TCPClient9availableEv+0x54>
   b57fa:	bf00      	nop
   b57fc:	000b62db 	.word	0x000b62db
   b5800:	000b62d4 	.word	0x000b62d4

000b5804 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5804:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5806:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5808:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b580a:	6818      	ldr	r0, [r3, #0]
   b580c:	2800      	cmp	r0, #0
   b580e:	db01      	blt.n	b5814 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5810:	f7ff f98a 	bl	b4b28 <sock_close>
   b5814:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b581a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b581c:	6960      	ldr	r0, [r4, #20]
   b581e:	2211      	movs	r2, #17
   b5820:	2100      	movs	r1, #0
   b5822:	308c      	adds	r0, #140	; 0x8c
   b5824:	f000 fbba 	bl	b5f9c <memset>
    flush_buffer();
   b5828:	4620      	mov	r0, r4
}
   b582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b582e:	f7ff bf0b 	b.w	b5648 <_ZN9TCPClient12flush_bufferEv>

000b5832 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5832:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5834:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5836:	4604      	mov	r4, r0
          total(0) {
   b5838:	6001      	str	r1, [r0, #0]
   b583a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b583e:	3088      	adds	r0, #136	; 0x88
   b5840:	f7ff fb5a 	bl	b4ef8 <_ZN9IPAddressC1Ev>
}
   b5844:	4620      	mov	r0, r4
   b5846:	bd10      	pop	{r4, pc}

000b5848 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5848:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b584a:	2300      	movs	r3, #0
   b584c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5850:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5854:	4a0e      	ldr	r2, [pc, #56]	; (b5890 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5856:	6103      	str	r3, [r0, #16]
   b5858:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b585a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b585c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b585e:	20ac      	movs	r0, #172	; 0xac
   b5860:	9101      	str	r1, [sp, #4]
   b5862:	f7fe fc28 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b5866:	1e05      	subs	r5, r0, #0
   b5868:	f105 060c 	add.w	r6, r5, #12
   b586c:	d008      	beq.n	b5880 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b586e:	2301      	movs	r3, #1
   b5870:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5874:	4b07      	ldr	r3, [pc, #28]	; (b5894 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5876:	9901      	ldr	r1, [sp, #4]
   b5878:	602b      	str	r3, [r5, #0]
   b587a:	4630      	mov	r0, r6
   b587c:	f7ff ffd9 	bl	b5832 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5880:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5882:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5886:	f7ff fedf 	bl	b5648 <_ZN9TCPClient12flush_bufferEv>
}
   b588a:	b002      	add	sp, #8
   b588c:	bd70      	pop	{r4, r5, r6, pc}
   b588e:	bf00      	nop
   b5890:	000b6310 	.word	0x000b6310
   b5894:	000b62f4 	.word	0x000b62f4

000b5898 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5898:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b589a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b589e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b58a0:	f7ff ffd2 	bl	b5848 <_ZN9TCPClientC1Ei>
}
   b58a4:	4620      	mov	r0, r4
   b58a6:	bd10      	pop	{r4, pc}

000b58a8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b58a8:	b510      	push	{r4, lr}
   b58aa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b58ac:	6800      	ldr	r0, [r0, #0]
   b58ae:	2800      	cmp	r0, #0
   b58b0:	db01      	blt.n	b58b6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b58b2:	f7ff f939 	bl	b4b28 <sock_close>
    }
}
   b58b6:	4620      	mov	r0, r4
   b58b8:	bd10      	pop	{r4, pc}

000b58ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b58ba:	300c      	adds	r0, #12
   b58bc:	f7ff bff4 	b.w	b58a8 <_ZN9TCPClient4DataD1Ev>

000b58c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b58c0:	4b02      	ldr	r3, [pc, #8]	; (b58cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b58c2:	681a      	ldr	r2, [r3, #0]
   b58c4:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b58c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b58c8:	4770      	bx	lr
   b58ca:	bf00      	nop
   b58cc:	2003e608 	.word	0x2003e608
   b58d0:	2003e714 	.word	0x2003e714

000b58d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b58d4:	4770      	bx	lr

000b58d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b58d6:	7441      	strb	r1, [r0, #17]
}
   b58d8:	4770      	bx	lr

000b58da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b58da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b58dc:	7c00      	ldrb	r0, [r0, #16]
   b58de:	f7ff f973 	bl	b4bc8 <hal_usart_available_data_for_write>
}
   b58e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58e6:	bd08      	pop	{r3, pc}

000b58e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b58e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b58ea:	7c00      	ldrb	r0, [r0, #16]
   b58ec:	f7ff f94c 	bl	b4b88 <hal_usart_available>
}
   b58f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58f4:	bd08      	pop	{r3, pc}

000b58f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b58f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b58f8:	7c00      	ldrb	r0, [r0, #16]
   b58fa:	f7ff f955 	bl	b4ba8 <hal_usart_peek>
}
   b58fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5902:	bd08      	pop	{r3, pc}

000b5904 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5904:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5906:	7c00      	ldrb	r0, [r0, #16]
   b5908:	f7ff f946 	bl	b4b98 <hal_usart_read>
}
   b590c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5910:	bd08      	pop	{r3, pc}

000b5912 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5912:	7c00      	ldrb	r0, [r0, #16]
   b5914:	f7ff b950 	b.w	b4bb8 <hal_usart_flush>

000b5918 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5918:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b591a:	7c45      	ldrb	r5, [r0, #17]
{
   b591c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b591e:	b12d      	cbz	r5, b592c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5920:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5922:	b003      	add	sp, #12
   b5924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5928:	f7ff b926 	b.w	b4b78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b592c:	7c00      	ldrb	r0, [r0, #16]
   b592e:	9101      	str	r1, [sp, #4]
   b5930:	f7ff f94a 	bl	b4bc8 <hal_usart_available_data_for_write>
   b5934:	2800      	cmp	r0, #0
   b5936:	9901      	ldr	r1, [sp, #4]
   b5938:	dcf2      	bgt.n	b5920 <_ZN11USARTSerial5writeEh+0x8>
}
   b593a:	4628      	mov	r0, r5
   b593c:	b003      	add	sp, #12
   b593e:	bd30      	pop	{r4, r5, pc}

000b5940 <_ZN11USARTSerialD0Ev>:
   b5940:	b510      	push	{r4, lr}
   b5942:	2114      	movs	r1, #20
   b5944:	4604      	mov	r4, r0
   b5946:	f7fe fbbc 	bl	b40c2 <_ZdlPvj>
   b594a:	4620      	mov	r0, r4
   b594c:	bd10      	pop	{r4, pc}
	...

000b5950 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5950:	b510      	push	{r4, lr}
   b5952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5956:	4604      	mov	r4, r0
   b5958:	4608      	mov	r0, r1
   b595a:	4611      	mov	r1, r2
   b595c:	2200      	movs	r2, #0
   b595e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5962:	4b04      	ldr	r3, [pc, #16]	; (b5974 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5964:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5966:	2301      	movs	r3, #1
  _serial = serial;
   b5968:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b596a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b596c:	f7ff f934 	bl	b4bd8 <hal_usart_init_ex>
}
   b5970:	4620      	mov	r0, r4
   b5972:	bd10      	pop	{r4, pc}
   b5974:	000b6378 	.word	0x000b6378

000b5978 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5978:	7441      	strb	r1, [r0, #17]
}
   b597a:	4770      	bx	lr

000b597c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b597c:	4770      	bx	lr

000b597e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b597e:	4770      	bx	lr

000b5980 <_ZN9USBSerial4readEv>:
{
   b5980:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5982:	2100      	movs	r1, #0
   b5984:	7c00      	ldrb	r0, [r0, #16]
   b5986:	f7ff f947 	bl	b4c18 <HAL_USB_USART_Receive_Data>
}
   b598a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b598e:	bd08      	pop	{r3, pc}

000b5990 <_ZN9USBSerial4peekEv>:
{
   b5990:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5992:	2101      	movs	r1, #1
   b5994:	7c00      	ldrb	r0, [r0, #16]
   b5996:	f7ff f93f 	bl	b4c18 <HAL_USB_USART_Receive_Data>
}
   b599a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b599e:	bd08      	pop	{r3, pc}

000b59a0 <_ZN9USBSerial17availableForWriteEv>:
{
   b59a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b59a2:	7c00      	ldrb	r0, [r0, #16]
   b59a4:	f7ff f930 	bl	b4c08 <HAL_USB_USART_Available_Data_For_Write>
}
   b59a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59ac:	bd08      	pop	{r3, pc}

000b59ae <_ZN9USBSerial9availableEv>:
{
   b59ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b59b0:	7c00      	ldrb	r0, [r0, #16]
   b59b2:	f7ff f921 	bl	b4bf8 <HAL_USB_USART_Available_Data>
}
   b59b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59ba:	bd08      	pop	{r3, pc}

000b59bc <_ZN9USBSerial5writeEh>:
{
   b59bc:	b513      	push	{r0, r1, r4, lr}
   b59be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b59c0:	7c00      	ldrb	r0, [r0, #16]
{
   b59c2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b59c4:	f7ff f920 	bl	b4c08 <HAL_USB_USART_Available_Data_For_Write>
   b59c8:	2800      	cmp	r0, #0
   b59ca:	9901      	ldr	r1, [sp, #4]
   b59cc:	dc01      	bgt.n	b59d2 <_ZN9USBSerial5writeEh+0x16>
   b59ce:	7c60      	ldrb	r0, [r4, #17]
   b59d0:	b120      	cbz	r0, b59dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b59d2:	7c20      	ldrb	r0, [r4, #16]
   b59d4:	f7ff f928 	bl	b4c28 <HAL_USB_USART_Send_Data>
   b59d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b59dc:	b002      	add	sp, #8
   b59de:	bd10      	pop	{r4, pc}

000b59e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b59e0:	7c00      	ldrb	r0, [r0, #16]
   b59e2:	f7ff b929 	b.w	b4c38 <HAL_USB_USART_Flush_Data>

000b59e6 <_ZN9USBSerialD0Ev>:
   b59e6:	b510      	push	{r4, lr}
   b59e8:	2114      	movs	r1, #20
   b59ea:	4604      	mov	r4, r0
   b59ec:	f7fe fb69 	bl	b40c2 <_ZdlPvj>
   b59f0:	4620      	mov	r0, r4
   b59f2:	bd10      	pop	{r4, pc}

000b59f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b59f4:	b510      	push	{r4, lr}
   b59f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59fa:	4604      	mov	r4, r0
   b59fc:	4608      	mov	r0, r1
   b59fe:	2100      	movs	r1, #0
   b5a00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5a04:	4b04      	ldr	r3, [pc, #16]	; (b5a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5a06:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a08:	2301      	movs	r3, #1
  _serial = serial;
   b5a0a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a0c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5a0e:	4611      	mov	r1, r2
   b5a10:	f7ff f8ea 	bl	b4be8 <HAL_USB_USART_Init>
}
   b5a14:	4620      	mov	r0, r4
   b5a16:	bd10      	pop	{r4, pc}
   b5a18:	000b63a8 	.word	0x000b63a8

000b5a1c <_Z19acquireSerialBufferv>:
{
   b5a1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5a1e:	2214      	movs	r2, #20
{
   b5a20:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5a22:	2100      	movs	r1, #0
   b5a24:	f000 faba 	bl	b5f9c <memset>
}
   b5a28:	4620      	mov	r0, r4
   b5a2a:	bd10      	pop	{r4, pc}

000b5a2c <_Z16_fetch_usbserialv>:
{
   b5a2c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5a2e:	4c0f      	ldr	r4, [pc, #60]	; (b5a6c <_Z16_fetch_usbserialv+0x40>)
{
   b5a30:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5a32:	a803      	add	r0, sp, #12
   b5a34:	f7ff fff2 	bl	b5a1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5a38:	7821      	ldrb	r1, [r4, #0]
   b5a3a:	f3bf 8f5b 	dmb	ish
   b5a3e:	f011 0101 	ands.w	r1, r1, #1
   b5a42:	d10f      	bne.n	b5a64 <_Z16_fetch_usbserialv+0x38>
   b5a44:	4620      	mov	r0, r4
   b5a46:	9101      	str	r1, [sp, #4]
   b5a48:	f7fe fb3d 	bl	b40c6 <__cxa_guard_acquire>
   b5a4c:	9901      	ldr	r1, [sp, #4]
   b5a4e:	b148      	cbz	r0, b5a64 <_Z16_fetch_usbserialv+0x38>
   b5a50:	aa03      	add	r2, sp, #12
   b5a52:	4807      	ldr	r0, [pc, #28]	; (b5a70 <_Z16_fetch_usbserialv+0x44>)
   b5a54:	f7ff ffce 	bl	b59f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f7fe fb39 	bl	b40d0 <__cxa_guard_release>
   b5a5e:	4805      	ldr	r0, [pc, #20]	; (b5a74 <_Z16_fetch_usbserialv+0x48>)
   b5a60:	f000 fa84 	bl	b5f6c <atexit>
	return _usbserial;
}
   b5a64:	4802      	ldr	r0, [pc, #8]	; (b5a70 <_Z16_fetch_usbserialv+0x44>)
   b5a66:	b008      	add	sp, #32
   b5a68:	bd10      	pop	{r4, pc}
   b5a6a:	bf00      	nop
   b5a6c:	2003e718 	.word	0x2003e718
   b5a70:	2003e71c 	.word	0x2003e71c
   b5a74:	000b597d 	.word	0x000b597d

000b5a78 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5a78:	2200      	movs	r2, #0
   b5a7a:	6840      	ldr	r0, [r0, #4]
   b5a7c:	4611      	mov	r1, r2
   b5a7e:	f7ff b93f 	b.w	b4d00 <network_ready>

000b5a82 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a82:	2200      	movs	r2, #0
   b5a84:	6840      	ldr	r0, [r0, #4]
   b5a86:	4611      	mov	r1, r2
   b5a88:	f7ff b95a 	b.w	b4d40 <network_listening>

000b5a8c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a8c:	2200      	movs	r2, #0
   b5a8e:	6840      	ldr	r0, [r0, #4]
   b5a90:	4611      	mov	r1, r2
   b5a92:	f7ff b965 	b.w	b4d60 <network_get_listen_timeout>

000b5a96 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a96:	6840      	ldr	r0, [r0, #4]
   b5a98:	2200      	movs	r2, #0
   b5a9a:	f7ff b959 	b.w	b4d50 <network_set_listen_timeout>

000b5a9e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a9e:	6840      	ldr	r0, [r0, #4]
   b5aa0:	2200      	movs	r2, #0
   b5aa2:	f081 0101 	eor.w	r1, r1, #1
   b5aa6:	f7ff b943 	b.w	b4d30 <network_listen>

000b5aaa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5aaa:	2300      	movs	r3, #0
   b5aac:	6840      	ldr	r0, [r0, #4]
   b5aae:	461a      	mov	r2, r3
   b5ab0:	4619      	mov	r1, r3
   b5ab2:	f7ff b935 	b.w	b4d20 <network_off>

000b5ab6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ab6:	2300      	movs	r3, #0
   b5ab8:	6840      	ldr	r0, [r0, #4]
   b5aba:	461a      	mov	r2, r3
   b5abc:	4619      	mov	r1, r3
   b5abe:	f7ff b927 	b.w	b4d10 <network_on>

000b5ac2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ac2:	2200      	movs	r2, #0
   b5ac4:	6840      	ldr	r0, [r0, #4]
   b5ac6:	4611      	mov	r1, r2
   b5ac8:	f7ff b90a 	b.w	b4ce0 <network_connecting>

000b5acc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5acc:	6840      	ldr	r0, [r0, #4]
   b5ace:	2200      	movs	r2, #0
   b5ad0:	2102      	movs	r1, #2
   b5ad2:	f7ff b90d 	b.w	b4cf0 <network_disconnect>

000b5ad6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5ad6:	2300      	movs	r3, #0
   b5ad8:	6840      	ldr	r0, [r0, #4]
   b5ada:	461a      	mov	r2, r3
   b5adc:	f7ff b8f8 	b.w	b4cd0 <network_connect>

000b5ae0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5ae0:	4b02      	ldr	r3, [pc, #8]	; (b5aec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5ae2:	2204      	movs	r2, #4
   b5ae4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5ae6:	4a02      	ldr	r2, [pc, #8]	; (b5af0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5ae8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5aea:	4770      	bx	lr
   b5aec:	2003e730 	.word	0x2003e730
   b5af0:	000b63d8 	.word	0x000b63d8

000b5af4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5af4:	b510      	push	{r4, lr}
   b5af6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5af8:	f7fe fa9a 	bl	b4030 <strlen>
   b5afc:	3801      	subs	r0, #1
   b5afe:	1823      	adds	r3, r4, r0
   b5b00:	4620      	mov	r0, r4
	while(i<j){
   b5b02:	4283      	cmp	r3, r0
   b5b04:	d906      	bls.n	b5b14 <_Z11str_reversePc+0x20>
		c = *i;
   b5b06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5b08:	7819      	ldrb	r1, [r3, #0]
   b5b0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5b0e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5b12:	e7f6      	b.n	b5b02 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5b14:	bd10      	pop	{r4, pc}

000b5b16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5b16:	b570      	push	{r4, r5, r6, lr}
   b5b18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5b1a:	1e91      	subs	r1, r2, #2
   b5b1c:	2922      	cmp	r1, #34	; 0x22
   b5b1e:	d81d      	bhi.n	b5b5c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5b20:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5b22:	b930      	cbnz	r0, b5b32 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5b24:	4423      	add	r3, r4
            *ptr++ = '0';
   b5b26:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5b28:	429d      	cmp	r5, r3
   b5b2a:	d210      	bcs.n	b5b4e <ultoa+0x38>
            *ptr++ = '0';
   b5b2c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5b30:	e7fa      	b.n	b5b28 <ultoa+0x12>
            result.quot = a/radix;
   b5b32:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5b36:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5b3a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5b3c:	2809      	cmp	r0, #9
                *ptr += '0';
   b5b3e:	bf94      	ite	ls
   b5b40:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5b42:	3157      	addhi	r1, #87	; 0x57
   b5b44:	b2c9      	uxtb	r1, r1
   b5b46:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5b4a:	4630      	mov	r0, r6
	while(a){
   b5b4c:	e7e9      	b.n	b5b22 <ultoa+0xc>

	*ptr = '\0';
   b5b4e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5b50:	4620      	mov	r0, r4
	*ptr = '\0';
   b5b52:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5b54:	f7ff ffce 	bl	b5af4 <_Z11str_reversePc>
	return buffer;
   b5b58:	4620      	mov	r0, r4
}
   b5b5a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5b5c:	2000      	movs	r0, #0
   b5b5e:	e7fc      	b.n	b5b5a <ultoa+0x44>

000b5b60 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b60:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5b62:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b64:	460c      	mov	r4, r1
   b5b66:	4615      	mov	r5, r2
	if(a<0){
   b5b68:	da0e      	bge.n	b5b88 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5b6e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b72:	bf14      	ite	ne
   b5b74:	4258      	negne	r0, r3
   b5b76:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5b78:	2301      	movs	r3, #1
		*buffer = '-';
   b5b7a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5b7c:	462a      	mov	r2, r5
   b5b7e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5b80:	f7ff ffc9 	bl	b5b16 <ultoa>
	}
	return buffer;
}
   b5b84:	4620      	mov	r0, r4
   b5b86:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5b88:	2301      	movs	r3, #1
   b5b8a:	e7f9      	b.n	b5b80 <itoa+0x20>

000b5b8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5b8c:	4b01      	ldr	r3, [pc, #4]	; (b5b94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5b8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5b90:	4770      	bx	lr
   b5b92:	bf00      	nop
   b5b94:	2003e60c 	.word	0x2003e60c

000b5b98 <serialEventRun>:
{
   b5b98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5b9a:	4b0b      	ldr	r3, [pc, #44]	; (b5bc8 <serialEventRun+0x30>)
   b5b9c:	b143      	cbz	r3, b5bb0 <serialEventRun+0x18>
   b5b9e:	f7ff ff45 	bl	b5a2c <_Z16_fetch_usbserialv>
   b5ba2:	6803      	ldr	r3, [r0, #0]
   b5ba4:	691b      	ldr	r3, [r3, #16]
   b5ba6:	4798      	blx	r3
   b5ba8:	2800      	cmp	r0, #0
   b5baa:	dd01      	ble.n	b5bb0 <serialEventRun+0x18>
        serialEvent();
   b5bac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5bb0:	4b06      	ldr	r3, [pc, #24]	; (b5bcc <serialEventRun+0x34>)
   b5bb2:	b143      	cbz	r3, b5bc6 <serialEventRun+0x2e>
   b5bb4:	f000 f8a2 	bl	b5cfc <_Z22__fetch_global_Serial1v>
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	691b      	ldr	r3, [r3, #16]
   b5bbc:	4798      	blx	r3
   b5bbe:	2800      	cmp	r0, #0
   b5bc0:	dd01      	ble.n	b5bc6 <serialEventRun+0x2e>
        serialEvent1();
   b5bc2:	f3af 8000 	nop.w
}
   b5bc6:	bd08      	pop	{r3, pc}
	...

000b5bd0 <_post_loop>:
{
   b5bd0:	b508      	push	{r3, lr}
	serialEventRun();
   b5bd2:	f7ff ffe1 	bl	b5b98 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5bd6:	f7fe ff67 	bl	b4aa8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5bda:	4b01      	ldr	r3, [pc, #4]	; (b5be0 <_post_loop+0x10>)
   b5bdc:	6018      	str	r0, [r3, #0]
}
   b5bde:	bd08      	pop	{r3, pc}
   b5be0:	2003e740 	.word	0x2003e740

000b5be4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5be4:	4805      	ldr	r0, [pc, #20]	; (b5bfc <_Z33system_initialize_user_backup_ramv+0x18>)
   b5be6:	4a06      	ldr	r2, [pc, #24]	; (b5c00 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5be8:	4906      	ldr	r1, [pc, #24]	; (b5c04 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5bea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5bec:	1a12      	subs	r2, r2, r0
   b5bee:	f000 f9c7 	bl	b5f80 <memcpy>
    __backup_sram_signature = signature;
   b5bf2:	4b05      	ldr	r3, [pc, #20]	; (b5c08 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5bf4:	4a05      	ldr	r2, [pc, #20]	; (b5c0c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5bf6:	601a      	str	r2, [r3, #0]
}
   b5bf8:	bd08      	pop	{r3, pc}
   b5bfa:	bf00      	nop
   b5bfc:	2003f400 	.word	0x2003f400
   b5c00:	2003f404 	.word	0x2003f404
   b5c04:	000b6788 	.word	0x000b6788
   b5c08:	2003f400 	.word	0x2003f400
   b5c0c:	9a271c1e 	.word	0x9a271c1e

000b5c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5c10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c12:	2300      	movs	r3, #0
   b5c14:	9300      	str	r3, [sp, #0]
   b5c16:	461a      	mov	r2, r3
   b5c18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c1c:	f7ff f83e 	bl	b4c9c <system_ctrl_set_result>
}
   b5c20:	b003      	add	sp, #12
   b5c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5c28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5c28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5c2a:	8843      	ldrh	r3, [r0, #2]
   b5c2c:	2b0a      	cmp	r3, #10
   b5c2e:	d008      	beq.n	b5c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5c30:	2b50      	cmp	r3, #80	; 0x50
   b5c32:	d10b      	bne.n	b5c4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5c34:	4b09      	ldr	r3, [pc, #36]	; (b5c5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5c36:	681b      	ldr	r3, [r3, #0]
   b5c38:	b14b      	cbz	r3, b5c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5c3a:	b003      	add	sp, #12
   b5c3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5c40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5c42:	f7ff ffe5 	bl	b5c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5c46:	b003      	add	sp, #12
   b5c48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c4c:	2300      	movs	r3, #0
   b5c4e:	9300      	str	r3, [sp, #0]
   b5c50:	461a      	mov	r2, r3
   b5c52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c56:	f7ff f821 	bl	b4c9c <system_ctrl_set_result>
}
   b5c5a:	e7f4      	b.n	b5c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5c5c:	2003e73c 	.word	0x2003e73c

000b5c60 <module_user_init_hook>:
{
   b5c60:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5c62:	4812      	ldr	r0, [pc, #72]	; (b5cac <module_user_init_hook+0x4c>)
   b5c64:	2100      	movs	r1, #0
   b5c66:	f7ff f8bb 	bl	b4de0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5c6a:	4b11      	ldr	r3, [pc, #68]	; (b5cb0 <module_user_init_hook+0x50>)
   b5c6c:	681a      	ldr	r2, [r3, #0]
   b5c6e:	4b11      	ldr	r3, [pc, #68]	; (b5cb4 <module_user_init_hook+0x54>)
   b5c70:	429a      	cmp	r2, r3
   b5c72:	4b11      	ldr	r3, [pc, #68]	; (b5cb8 <module_user_init_hook+0x58>)
   b5c74:	bf0c      	ite	eq
   b5c76:	2201      	moveq	r2, #1
   b5c78:	2200      	movne	r2, #0
   b5c7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5c7c:	d001      	beq.n	b5c82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5c7e:	f7ff ffb1 	bl	b5be4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5c82:	f7fe ff09 	bl	b4a98 <HAL_RNG_GetRandomNumber>
   b5c86:	4604      	mov	r4, r0
    srand(seed);
   b5c88:	f000 f990 	bl	b5fac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5c8c:	4b0b      	ldr	r3, [pc, #44]	; (b5cbc <module_user_init_hook+0x5c>)
   b5c8e:	b113      	cbz	r3, b5c96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5c90:	4620      	mov	r0, r4
   b5c92:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5c96:	2100      	movs	r1, #0
   b5c98:	4808      	ldr	r0, [pc, #32]	; (b5cbc <module_user_init_hook+0x5c>)
   b5c9a:	f7ff f811 	bl	b4cc0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ca2:	4807      	ldr	r0, [pc, #28]	; (b5cc0 <module_user_init_hook+0x60>)
   b5ca4:	2100      	movs	r1, #0
   b5ca6:	f7fe bfef 	b.w	b4c88 <system_ctrl_set_app_request_handler>
   b5caa:	bf00      	nop
   b5cac:	000b5b8d 	.word	0x000b5b8d
   b5cb0:	2003f400 	.word	0x2003f400
   b5cb4:	9a271c1e 	.word	0x9a271c1e
   b5cb8:	2003e738 	.word	0x2003e738
   b5cbc:	00000000 	.word	0x00000000
   b5cc0:	000b5c29 	.word	0x000b5c29

000b5cc4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5cc4:	4770      	bx	lr
	...

000b5cc8 <_Z20acquireSerial1Bufferv>:
{
   b5cc8:	b538      	push	{r3, r4, r5, lr}
   b5cca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5ccc:	2514      	movs	r5, #20
   b5cce:	462a      	mov	r2, r5
   b5cd0:	2100      	movs	r1, #0
   b5cd2:	f000 f963 	bl	b5f9c <memset>
   b5cd6:	8025      	strh	r5, [r4, #0]
   b5cd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cda:	4907      	ldr	r1, [pc, #28]	; (b5cf8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5cdc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5ce0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ce2:	f000 f82f 	bl	b5d44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ce6:	4904      	ldr	r1, [pc, #16]	; (b5cf8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5ce8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cea:	4628      	mov	r0, r5
   b5cec:	f000 f82a 	bl	b5d44 <_ZnajRKSt9nothrow_t>
    };
   b5cf0:	60e0      	str	r0, [r4, #12]
}
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	bd38      	pop	{r3, r4, r5, pc}
   b5cf6:	bf00      	nop
   b5cf8:	000b640c 	.word	0x000b640c

000b5cfc <_Z22__fetch_global_Serial1v>:
{
   b5cfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5cfe:	4d0e      	ldr	r5, [pc, #56]	; (b5d38 <_Z22__fetch_global_Serial1v+0x3c>)
   b5d00:	7829      	ldrb	r1, [r5, #0]
   b5d02:	f3bf 8f5b 	dmb	ish
   b5d06:	f011 0401 	ands.w	r4, r1, #1
{
   b5d0a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d0c:	d111      	bne.n	b5d32 <_Z22__fetch_global_Serial1v+0x36>
   b5d0e:	4628      	mov	r0, r5
   b5d10:	f7fe f9d9 	bl	b40c6 <__cxa_guard_acquire>
   b5d14:	b168      	cbz	r0, b5d32 <_Z22__fetch_global_Serial1v+0x36>
   b5d16:	a801      	add	r0, sp, #4
   b5d18:	f7ff ffd6 	bl	b5cc8 <_Z20acquireSerial1Bufferv>
   b5d1c:	aa01      	add	r2, sp, #4
   b5d1e:	4621      	mov	r1, r4
   b5d20:	4806      	ldr	r0, [pc, #24]	; (b5d3c <_Z22__fetch_global_Serial1v+0x40>)
   b5d22:	f7ff fe15 	bl	b5950 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5d26:	4628      	mov	r0, r5
   b5d28:	f7fe f9d2 	bl	b40d0 <__cxa_guard_release>
   b5d2c:	4804      	ldr	r0, [pc, #16]	; (b5d40 <_Z22__fetch_global_Serial1v+0x44>)
   b5d2e:	f000 f91d 	bl	b5f6c <atexit>
    return serial1;
}
   b5d32:	4802      	ldr	r0, [pc, #8]	; (b5d3c <_Z22__fetch_global_Serial1v+0x40>)
   b5d34:	b007      	add	sp, #28
   b5d36:	bd30      	pop	{r4, r5, pc}
   b5d38:	2003e744 	.word	0x2003e744
   b5d3c:	2003e748 	.word	0x2003e748
   b5d40:	000b5cc5 	.word	0x000b5cc5

000b5d44 <_ZnajRKSt9nothrow_t>:
   b5d44:	f7fe b9b9 	b.w	b40ba <_Znaj>

000b5d48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5d48:	4901      	ldr	r1, [pc, #4]	; (b5d50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5d4a:	f000 b8f9 	b.w	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5d4e:	bf00      	nop
   b5d50:	000b6428 	.word	0x000b6428

000b5d54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5d54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5d56:	2400      	movs	r4, #0
   b5d58:	2310      	movs	r3, #16
   b5d5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5d5e:	6803      	ldr	r3, [r0, #0]
   b5d60:	4615      	mov	r5, r2
   b5d62:	699e      	ldr	r6, [r3, #24]
   b5d64:	6812      	ldr	r2, [r2, #0]
   b5d66:	466b      	mov	r3, sp
   b5d68:	e9cd 4400 	strd	r4, r4, [sp]
   b5d6c:	47b0      	blx	r6
   b5d6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5d72:	f003 0306 	and.w	r3, r3, #6
   b5d76:	2b06      	cmp	r3, #6
   b5d78:	bf03      	ittte	eq
   b5d7a:	9b00      	ldreq	r3, [sp, #0]
   b5d7c:	602b      	streq	r3, [r5, #0]
   b5d7e:	2001      	moveq	r0, #1
   b5d80:	4620      	movne	r0, r4
   b5d82:	b004      	add	sp, #16
   b5d84:	bd70      	pop	{r4, r5, r6, pc}

000b5d86 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5d86:	9800      	ldr	r0, [sp, #0]
   b5d88:	4290      	cmp	r0, r2
   b5d8a:	bf14      	ite	ne
   b5d8c:	2001      	movne	r0, #1
   b5d8e:	2006      	moveq	r0, #6
   b5d90:	4770      	bx	lr
	...

000b5d94 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5d94:	b510      	push	{r4, lr}
   b5d96:	4b03      	ldr	r3, [pc, #12]	; (b5da4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5d98:	6003      	str	r3, [r0, #0]
   b5d9a:	4604      	mov	r4, r0
   b5d9c:	f000 f8cd 	bl	b5f3a <_ZNSt9type_infoD1Ev>
   b5da0:	4620      	mov	r0, r4
   b5da2:	bd10      	pop	{r4, pc}
   b5da4:	000b6468 	.word	0x000b6468

000b5da8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5da8:	b510      	push	{r4, lr}
   b5daa:	4604      	mov	r4, r0
   b5dac:	f7ff fff2 	bl	b5d94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5db0:	4620      	mov	r0, r4
   b5db2:	2108      	movs	r1, #8
   b5db4:	f7fe f985 	bl	b40c2 <_ZdlPvj>
   b5db8:	4620      	mov	r0, r4
   b5dba:	bd10      	pop	{r4, pc}

000b5dbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5dc0:	461f      	mov	r7, r3
   b5dc2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5dc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5dca:	4598      	cmp	r8, r3
   b5dcc:	4606      	mov	r6, r0
   b5dce:	4615      	mov	r5, r2
   b5dd0:	d107      	bne.n	b5de2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5dd2:	9907      	ldr	r1, [sp, #28]
   b5dd4:	f000 f8b4 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5dd8:	b118      	cbz	r0, b5de2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5dda:	7165      	strb	r5, [r4, #5]
   b5ddc:	2000      	movs	r0, #0
   b5dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5de2:	4639      	mov	r1, r7
   b5de4:	4630      	mov	r0, r6
   b5de6:	f000 f8ab 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5dea:	2800      	cmp	r0, #0
   b5dec:	d0f6      	beq.n	b5ddc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5dee:	2301      	movs	r3, #1
   b5df0:	f8c4 8000 	str.w	r8, [r4]
   b5df4:	7125      	strb	r5, [r4, #4]
   b5df6:	71a3      	strb	r3, [r4, #6]
   b5df8:	e7f0      	b.n	b5ddc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5dfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5dfa:	b538      	push	{r3, r4, r5, lr}
   b5dfc:	4615      	mov	r5, r2
   b5dfe:	461c      	mov	r4, r3
   b5e00:	f000 f89e 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5e04:	b120      	cbz	r0, b5e10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5e06:	2308      	movs	r3, #8
   b5e08:	60e3      	str	r3, [r4, #12]
   b5e0a:	2306      	movs	r3, #6
   b5e0c:	6025      	str	r5, [r4, #0]
   b5e0e:	7123      	strb	r3, [r4, #4]
   b5e10:	bd38      	pop	{r3, r4, r5, pc}

000b5e12 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e14:	4605      	mov	r5, r0
   b5e16:	460c      	mov	r4, r1
   b5e18:	9201      	str	r2, [sp, #4]
   b5e1a:	461e      	mov	r6, r3
   b5e1c:	f000 f890 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5e20:	b950      	cbnz	r0, b5e38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5e22:	2e03      	cmp	r6, #3
   b5e24:	d808      	bhi.n	b5e38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5e26:	6823      	ldr	r3, [r4, #0]
   b5e28:	9a01      	ldr	r2, [sp, #4]
   b5e2a:	695b      	ldr	r3, [r3, #20]
   b5e2c:	4629      	mov	r1, r5
   b5e2e:	4620      	mov	r0, r4
   b5e30:	b002      	add	sp, #8
   b5e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5e36:	4718      	bx	r3
   b5e38:	b002      	add	sp, #8
   b5e3a:	bd70      	pop	{r4, r5, r6, pc}

000b5e3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5e3c:	b510      	push	{r4, lr}
   b5e3e:	4b03      	ldr	r3, [pc, #12]	; (b5e4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5e40:	6003      	str	r3, [r0, #0]
   b5e42:	4604      	mov	r4, r0
   b5e44:	f7ff ffa6 	bl	b5d94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	bd10      	pop	{r4, pc}
   b5e4c:	000b64c8 	.word	0x000b64c8

000b5e50 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5e50:	b510      	push	{r4, lr}
   b5e52:	4604      	mov	r4, r0
   b5e54:	f7ff fff2 	bl	b5e3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5e58:	4620      	mov	r0, r4
   b5e5a:	210c      	movs	r1, #12
   b5e5c:	f7fe f931 	bl	b40c2 <_ZdlPvj>
   b5e60:	4620      	mov	r0, r4
   b5e62:	bd10      	pop	{r4, pc}

000b5e64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e66:	9f08      	ldr	r7, [sp, #32]
   b5e68:	4297      	cmp	r7, r2
   b5e6a:	4605      	mov	r5, r0
   b5e6c:	460e      	mov	r6, r1
   b5e6e:	4614      	mov	r4, r2
   b5e70:	d00a      	beq.n	b5e88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5e72:	68a8      	ldr	r0, [r5, #8]
   b5e74:	6802      	ldr	r2, [r0, #0]
   b5e76:	9708      	str	r7, [sp, #32]
   b5e78:	6a15      	ldr	r5, [r2, #32]
   b5e7a:	4631      	mov	r1, r6
   b5e7c:	4622      	mov	r2, r4
   b5e7e:	46ac      	mov	ip, r5
   b5e80:	b003      	add	sp, #12
   b5e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5e86:	4760      	bx	ip
   b5e88:	4619      	mov	r1, r3
   b5e8a:	9301      	str	r3, [sp, #4]
   b5e8c:	f000 f858 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5e90:	9b01      	ldr	r3, [sp, #4]
   b5e92:	2800      	cmp	r0, #0
   b5e94:	d0ed      	beq.n	b5e72 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5e96:	2006      	movs	r0, #6
   b5e98:	b003      	add	sp, #12
   b5e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5e9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5e9c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ea0:	460d      	mov	r5, r1
   b5ea2:	4619      	mov	r1, r3
   b5ea4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5ea8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5eac:	4681      	mov	r9, r0
   b5eae:	4617      	mov	r7, r2
   b5eb0:	4698      	mov	r8, r3
   b5eb2:	f000 f845 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5eb6:	b190      	cbz	r0, b5ede <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5eb8:	2d00      	cmp	r5, #0
   b5eba:	6034      	str	r4, [r6, #0]
   b5ebc:	7137      	strb	r7, [r6, #4]
   b5ebe:	db09      	blt.n	b5ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5ec0:	1961      	adds	r1, r4, r5
   b5ec2:	458a      	cmp	sl, r1
   b5ec4:	bf0c      	ite	eq
   b5ec6:	2106      	moveq	r1, #6
   b5ec8:	2101      	movne	r1, #1
   b5eca:	71b1      	strb	r1, [r6, #6]
   b5ecc:	2000      	movs	r0, #0
   b5ece:	b001      	add	sp, #4
   b5ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ed4:	3502      	adds	r5, #2
   b5ed6:	d1f9      	bne.n	b5ecc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5ed8:	2301      	movs	r3, #1
   b5eda:	71b3      	strb	r3, [r6, #6]
   b5edc:	e7f6      	b.n	b5ecc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5ede:	4554      	cmp	r4, sl
   b5ee0:	d106      	bne.n	b5ef0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5ee2:	4659      	mov	r1, fp
   b5ee4:	4648      	mov	r0, r9
   b5ee6:	f000 f82b 	bl	b5f40 <_ZNKSt9type_infoeqERKS_>
   b5eea:	b108      	cbz	r0, b5ef0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5eec:	7177      	strb	r7, [r6, #5]
   b5eee:	e7ed      	b.n	b5ecc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5ef0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5ef4:	6803      	ldr	r3, [r0, #0]
   b5ef6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5efa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5efe:	69dc      	ldr	r4, [r3, #28]
   b5f00:	463a      	mov	r2, r7
   b5f02:	4643      	mov	r3, r8
   b5f04:	4629      	mov	r1, r5
   b5f06:	46a4      	mov	ip, r4
   b5f08:	b001      	add	sp, #4
   b5f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f0e:	4760      	bx	ip

000b5f10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f14:	4607      	mov	r7, r0
   b5f16:	460c      	mov	r4, r1
   b5f18:	4615      	mov	r5, r2
   b5f1a:	461e      	mov	r6, r3
   b5f1c:	f7ff ff6d 	bl	b5dfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5f20:	b948      	cbnz	r0, b5f36 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5f22:	68b8      	ldr	r0, [r7, #8]
   b5f24:	6803      	ldr	r3, [r0, #0]
   b5f26:	699f      	ldr	r7, [r3, #24]
   b5f28:	462a      	mov	r2, r5
   b5f2a:	4633      	mov	r3, r6
   b5f2c:	4621      	mov	r1, r4
   b5f2e:	46bc      	mov	ip, r7
   b5f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5f34:	4760      	bx	ip
   b5f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5f3a <_ZNSt9type_infoD1Ev>:
   b5f3a:	4770      	bx	lr

000b5f3c <_ZNKSt9type_info14__is_pointer_pEv>:
   b5f3c:	2000      	movs	r0, #0
   b5f3e:	4770      	bx	lr

000b5f40 <_ZNKSt9type_infoeqERKS_>:
   b5f40:	4281      	cmp	r1, r0
   b5f42:	b508      	push	{r3, lr}
   b5f44:	d00e      	beq.n	b5f64 <_ZNKSt9type_infoeqERKS_+0x24>
   b5f46:	6840      	ldr	r0, [r0, #4]
   b5f48:	7803      	ldrb	r3, [r0, #0]
   b5f4a:	2b2a      	cmp	r3, #42	; 0x2a
   b5f4c:	d00c      	beq.n	b5f68 <_ZNKSt9type_infoeqERKS_+0x28>
   b5f4e:	6849      	ldr	r1, [r1, #4]
   b5f50:	780b      	ldrb	r3, [r1, #0]
   b5f52:	2b2a      	cmp	r3, #42	; 0x2a
   b5f54:	bf08      	it	eq
   b5f56:	3101      	addeq	r1, #1
   b5f58:	f7fe f860 	bl	b401c <strcmp>
   b5f5c:	fab0 f080 	clz	r0, r0
   b5f60:	0940      	lsrs	r0, r0, #5
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	2001      	movs	r0, #1
   b5f66:	e7fc      	b.n	b5f62 <_ZNKSt9type_infoeqERKS_+0x22>
   b5f68:	2000      	movs	r0, #0
   b5f6a:	e7fa      	b.n	b5f62 <_ZNKSt9type_infoeqERKS_+0x22>

000b5f6c <atexit>:
   b5f6c:	2300      	movs	r3, #0
   b5f6e:	4601      	mov	r1, r0
   b5f70:	461a      	mov	r2, r3
   b5f72:	4618      	mov	r0, r3
   b5f74:	f000 b8d4 	b.w	b6120 <__register_exitproc>

000b5f78 <atoi>:
   b5f78:	220a      	movs	r2, #10
   b5f7a:	2100      	movs	r1, #0
   b5f7c:	f000 b8c6 	b.w	b610c <strtol>

000b5f80 <memcpy>:
   b5f80:	440a      	add	r2, r1
   b5f82:	4291      	cmp	r1, r2
   b5f84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5f88:	d100      	bne.n	b5f8c <memcpy+0xc>
   b5f8a:	4770      	bx	lr
   b5f8c:	b510      	push	{r4, lr}
   b5f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5f92:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5f96:	4291      	cmp	r1, r2
   b5f98:	d1f9      	bne.n	b5f8e <memcpy+0xe>
   b5f9a:	bd10      	pop	{r4, pc}

000b5f9c <memset>:
   b5f9c:	4402      	add	r2, r0
   b5f9e:	4603      	mov	r3, r0
   b5fa0:	4293      	cmp	r3, r2
   b5fa2:	d100      	bne.n	b5fa6 <memset+0xa>
   b5fa4:	4770      	bx	lr
   b5fa6:	f803 1b01 	strb.w	r1, [r3], #1
   b5faa:	e7f9      	b.n	b5fa0 <memset+0x4>

000b5fac <srand>:
   b5fac:	b538      	push	{r3, r4, r5, lr}
   b5fae:	4b10      	ldr	r3, [pc, #64]	; (b5ff0 <srand+0x44>)
   b5fb0:	681d      	ldr	r5, [r3, #0]
   b5fb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5fb4:	4604      	mov	r4, r0
   b5fb6:	b9b3      	cbnz	r3, b5fe6 <srand+0x3a>
   b5fb8:	2018      	movs	r0, #24
   b5fba:	f7fe fee9 	bl	b4d90 <malloc>
   b5fbe:	4602      	mov	r2, r0
   b5fc0:	63a8      	str	r0, [r5, #56]	; 0x38
   b5fc2:	b920      	cbnz	r0, b5fce <srand+0x22>
   b5fc4:	4b0b      	ldr	r3, [pc, #44]	; (b5ff4 <srand+0x48>)
   b5fc6:	480c      	ldr	r0, [pc, #48]	; (b5ff8 <srand+0x4c>)
   b5fc8:	2142      	movs	r1, #66	; 0x42
   b5fca:	f7fe ff01 	bl	b4dd0 <__assert_func>
   b5fce:	490b      	ldr	r1, [pc, #44]	; (b5ffc <srand+0x50>)
   b5fd0:	4b0b      	ldr	r3, [pc, #44]	; (b6000 <srand+0x54>)
   b5fd2:	e9c0 1300 	strd	r1, r3, [r0]
   b5fd6:	4b0b      	ldr	r3, [pc, #44]	; (b6004 <srand+0x58>)
   b5fd8:	6083      	str	r3, [r0, #8]
   b5fda:	230b      	movs	r3, #11
   b5fdc:	8183      	strh	r3, [r0, #12]
   b5fde:	2100      	movs	r1, #0
   b5fe0:	2001      	movs	r0, #1
   b5fe2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5fe8:	2200      	movs	r2, #0
   b5fea:	611c      	str	r4, [r3, #16]
   b5fec:	615a      	str	r2, [r3, #20]
   b5fee:	bd38      	pop	{r3, r4, r5, pc}
   b5ff0:	2003e60c 	.word	0x2003e60c
   b5ff4:	000b6501 	.word	0x000b6501
   b5ff8:	000b6518 	.word	0x000b6518
   b5ffc:	abcd330e 	.word	0xabcd330e
   b6000:	e66d1234 	.word	0xe66d1234
   b6004:	0005deec 	.word	0x0005deec

000b6008 <_strtol_l.constprop.0>:
   b6008:	2b01      	cmp	r3, #1
   b600a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b600e:	d001      	beq.n	b6014 <_strtol_l.constprop.0+0xc>
   b6010:	2b24      	cmp	r3, #36	; 0x24
   b6012:	d906      	bls.n	b6022 <_strtol_l.constprop.0+0x1a>
   b6014:	f7fe fed4 	bl	b4dc0 <__errno>
   b6018:	2316      	movs	r3, #22
   b601a:	6003      	str	r3, [r0, #0]
   b601c:	2000      	movs	r0, #0
   b601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6022:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b6108 <_strtol_l.constprop.0+0x100>
   b6026:	460d      	mov	r5, r1
   b6028:	462e      	mov	r6, r5
   b602a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b602e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b6032:	f017 0708 	ands.w	r7, r7, #8
   b6036:	d1f7      	bne.n	b6028 <_strtol_l.constprop.0+0x20>
   b6038:	2c2d      	cmp	r4, #45	; 0x2d
   b603a:	d132      	bne.n	b60a2 <_strtol_l.constprop.0+0x9a>
   b603c:	782c      	ldrb	r4, [r5, #0]
   b603e:	2701      	movs	r7, #1
   b6040:	1cb5      	adds	r5, r6, #2
   b6042:	2b00      	cmp	r3, #0
   b6044:	d05b      	beq.n	b60fe <_strtol_l.constprop.0+0xf6>
   b6046:	2b10      	cmp	r3, #16
   b6048:	d109      	bne.n	b605e <_strtol_l.constprop.0+0x56>
   b604a:	2c30      	cmp	r4, #48	; 0x30
   b604c:	d107      	bne.n	b605e <_strtol_l.constprop.0+0x56>
   b604e:	782c      	ldrb	r4, [r5, #0]
   b6050:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b6054:	2c58      	cmp	r4, #88	; 0x58
   b6056:	d14d      	bne.n	b60f4 <_strtol_l.constprop.0+0xec>
   b6058:	786c      	ldrb	r4, [r5, #1]
   b605a:	2310      	movs	r3, #16
   b605c:	3502      	adds	r5, #2
   b605e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b6062:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6066:	f04f 0c00 	mov.w	ip, #0
   b606a:	fbb8 f9f3 	udiv	r9, r8, r3
   b606e:	4666      	mov	r6, ip
   b6070:	fb03 8a19 	mls	sl, r3, r9, r8
   b6074:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b6078:	f1be 0f09 	cmp.w	lr, #9
   b607c:	d816      	bhi.n	b60ac <_strtol_l.constprop.0+0xa4>
   b607e:	4674      	mov	r4, lr
   b6080:	42a3      	cmp	r3, r4
   b6082:	dd24      	ble.n	b60ce <_strtol_l.constprop.0+0xc6>
   b6084:	f1bc 0f00 	cmp.w	ip, #0
   b6088:	db1e      	blt.n	b60c8 <_strtol_l.constprop.0+0xc0>
   b608a:	45b1      	cmp	r9, r6
   b608c:	d31c      	bcc.n	b60c8 <_strtol_l.constprop.0+0xc0>
   b608e:	d101      	bne.n	b6094 <_strtol_l.constprop.0+0x8c>
   b6090:	45a2      	cmp	sl, r4
   b6092:	db19      	blt.n	b60c8 <_strtol_l.constprop.0+0xc0>
   b6094:	fb06 4603 	mla	r6, r6, r3, r4
   b6098:	f04f 0c01 	mov.w	ip, #1
   b609c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b60a0:	e7e8      	b.n	b6074 <_strtol_l.constprop.0+0x6c>
   b60a2:	2c2b      	cmp	r4, #43	; 0x2b
   b60a4:	bf04      	itt	eq
   b60a6:	782c      	ldrbeq	r4, [r5, #0]
   b60a8:	1cb5      	addeq	r5, r6, #2
   b60aa:	e7ca      	b.n	b6042 <_strtol_l.constprop.0+0x3a>
   b60ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b60b0:	f1be 0f19 	cmp.w	lr, #25
   b60b4:	d801      	bhi.n	b60ba <_strtol_l.constprop.0+0xb2>
   b60b6:	3c37      	subs	r4, #55	; 0x37
   b60b8:	e7e2      	b.n	b6080 <_strtol_l.constprop.0+0x78>
   b60ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b60be:	f1be 0f19 	cmp.w	lr, #25
   b60c2:	d804      	bhi.n	b60ce <_strtol_l.constprop.0+0xc6>
   b60c4:	3c57      	subs	r4, #87	; 0x57
   b60c6:	e7db      	b.n	b6080 <_strtol_l.constprop.0+0x78>
   b60c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b60cc:	e7e6      	b.n	b609c <_strtol_l.constprop.0+0x94>
   b60ce:	f1bc 0f00 	cmp.w	ip, #0
   b60d2:	da05      	bge.n	b60e0 <_strtol_l.constprop.0+0xd8>
   b60d4:	2322      	movs	r3, #34	; 0x22
   b60d6:	6003      	str	r3, [r0, #0]
   b60d8:	4646      	mov	r6, r8
   b60da:	b942      	cbnz	r2, b60ee <_strtol_l.constprop.0+0xe6>
   b60dc:	4630      	mov	r0, r6
   b60de:	e79e      	b.n	b601e <_strtol_l.constprop.0+0x16>
   b60e0:	b107      	cbz	r7, b60e4 <_strtol_l.constprop.0+0xdc>
   b60e2:	4276      	negs	r6, r6
   b60e4:	2a00      	cmp	r2, #0
   b60e6:	d0f9      	beq.n	b60dc <_strtol_l.constprop.0+0xd4>
   b60e8:	f1bc 0f00 	cmp.w	ip, #0
   b60ec:	d000      	beq.n	b60f0 <_strtol_l.constprop.0+0xe8>
   b60ee:	1e69      	subs	r1, r5, #1
   b60f0:	6011      	str	r1, [r2, #0]
   b60f2:	e7f3      	b.n	b60dc <_strtol_l.constprop.0+0xd4>
   b60f4:	2430      	movs	r4, #48	; 0x30
   b60f6:	2b00      	cmp	r3, #0
   b60f8:	d1b1      	bne.n	b605e <_strtol_l.constprop.0+0x56>
   b60fa:	2308      	movs	r3, #8
   b60fc:	e7af      	b.n	b605e <_strtol_l.constprop.0+0x56>
   b60fe:	2c30      	cmp	r4, #48	; 0x30
   b6100:	d0a5      	beq.n	b604e <_strtol_l.constprop.0+0x46>
   b6102:	230a      	movs	r3, #10
   b6104:	e7ab      	b.n	b605e <_strtol_l.constprop.0+0x56>
   b6106:	bf00      	nop
   b6108:	000b6572 	.word	0x000b6572

000b610c <strtol>:
   b610c:	4613      	mov	r3, r2
   b610e:	460a      	mov	r2, r1
   b6110:	4601      	mov	r1, r0
   b6112:	4802      	ldr	r0, [pc, #8]	; (b611c <strtol+0x10>)
   b6114:	6800      	ldr	r0, [r0, #0]
   b6116:	f7ff bf77 	b.w	b6008 <_strtol_l.constprop.0>
   b611a:	bf00      	nop
   b611c:	2003e60c 	.word	0x2003e60c

000b6120 <__register_exitproc>:
   b6120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6124:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b61e0 <__register_exitproc+0xc0>
   b6128:	4606      	mov	r6, r0
   b612a:	f8d8 0000 	ldr.w	r0, [r8]
   b612e:	461f      	mov	r7, r3
   b6130:	460d      	mov	r5, r1
   b6132:	4691      	mov	r9, r2
   b6134:	f000 f856 	bl	b61e4 <__retarget_lock_acquire_recursive>
   b6138:	4b25      	ldr	r3, [pc, #148]	; (b61d0 <__register_exitproc+0xb0>)
   b613a:	681c      	ldr	r4, [r3, #0]
   b613c:	b934      	cbnz	r4, b614c <__register_exitproc+0x2c>
   b613e:	4c25      	ldr	r4, [pc, #148]	; (b61d4 <__register_exitproc+0xb4>)
   b6140:	601c      	str	r4, [r3, #0]
   b6142:	4b25      	ldr	r3, [pc, #148]	; (b61d8 <__register_exitproc+0xb8>)
   b6144:	b113      	cbz	r3, b614c <__register_exitproc+0x2c>
   b6146:	681b      	ldr	r3, [r3, #0]
   b6148:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b614c:	6863      	ldr	r3, [r4, #4]
   b614e:	2b1f      	cmp	r3, #31
   b6150:	dd07      	ble.n	b6162 <__register_exitproc+0x42>
   b6152:	f8d8 0000 	ldr.w	r0, [r8]
   b6156:	f000 f847 	bl	b61e8 <__retarget_lock_release_recursive>
   b615a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b615e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6162:	b34e      	cbz	r6, b61b8 <__register_exitproc+0x98>
   b6164:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6168:	b988      	cbnz	r0, b618e <__register_exitproc+0x6e>
   b616a:	4b1c      	ldr	r3, [pc, #112]	; (b61dc <__register_exitproc+0xbc>)
   b616c:	b923      	cbnz	r3, b6178 <__register_exitproc+0x58>
   b616e:	f8d8 0000 	ldr.w	r0, [r8]
   b6172:	f000 f838 	bl	b61e6 <__retarget_lock_release>
   b6176:	e7f0      	b.n	b615a <__register_exitproc+0x3a>
   b6178:	f44f 7084 	mov.w	r0, #264	; 0x108
   b617c:	f7fe fe08 	bl	b4d90 <malloc>
   b6180:	2800      	cmp	r0, #0
   b6182:	d0f4      	beq.n	b616e <__register_exitproc+0x4e>
   b6184:	2300      	movs	r3, #0
   b6186:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b618a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b618e:	6863      	ldr	r3, [r4, #4]
   b6190:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6194:	2201      	movs	r2, #1
   b6196:	409a      	lsls	r2, r3
   b6198:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b619c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b61a0:	4313      	orrs	r3, r2
   b61a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b61a6:	2e02      	cmp	r6, #2
   b61a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b61ac:	bf02      	ittt	eq
   b61ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b61b2:	4313      	orreq	r3, r2
   b61b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b61b8:	6863      	ldr	r3, [r4, #4]
   b61ba:	f8d8 0000 	ldr.w	r0, [r8]
   b61be:	1c5a      	adds	r2, r3, #1
   b61c0:	3302      	adds	r3, #2
   b61c2:	6062      	str	r2, [r4, #4]
   b61c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b61c8:	f000 f80e 	bl	b61e8 <__retarget_lock_release_recursive>
   b61cc:	2000      	movs	r0, #0
   b61ce:	e7c6      	b.n	b615e <__register_exitproc+0x3e>
   b61d0:	2003e7e8 	.word	0x2003e7e8
   b61d4:	2003e75c 	.word	0x2003e75c
   b61d8:	00000000 	.word	0x00000000
   b61dc:	000b4d91 	.word	0x000b4d91
   b61e0:	2003e670 	.word	0x2003e670

000b61e4 <__retarget_lock_acquire_recursive>:
   b61e4:	4770      	bx	lr

000b61e6 <__retarget_lock_release>:
   b61e6:	4770      	bx	lr

000b61e8 <__retarget_lock_release_recursive>:
   b61e8:	4770      	bx	lr

000b61ea <link_code_end>:
	...

000b61ec <link_const_data_start>:
   b61ec:	514d0400 	.word	0x514d0400
   b61f0:	00045454 	.word	0x00045454
   b61f4:	49514d06 	.word	0x49514d06
   b61f8:	03706473 	.word	0x03706473

000b61fc <dynalib_user>:
   b61fc:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b620c:	00000000 664d5346 6f746e65 74754f6e     ....FSMfentonOut
   b621c:	00747570 664d5346 6f746e65 616c006e     put.FSMfenton.la
   b622c:	68742e62 6c637765 6d6f632e 00000000     b.thewcl.com....

000b623c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6244 <_ZTVN5spark13EthernetClassE>:
	...
   b624c:	000b4e67 000b4e5d 000b4e53 000b4e49     gN..]N..SN..IN..
   b625c:	000b4e3d 000b4e31 000b4ff1 000b4ff9     =N..1N...O...O..
   b626c:	000b4e25 000b4e1d 000b4e13 000b4e09     %N...N...N...N..
   b627c:	000b5029                                )P..

000b6280 <_ZTV9IPAddress>:
	...
   b6288:	000b4e95 000b4e85 000b4e87 00707061     .N...N...N..app.

000b6298 <_ZTVN5spark12NetworkClassE>:
	...
   b62a0:	000b4fb1 000b4fbb 000b4fc5 000b4fcf     .O...O...O...O..
   b62b0:	000b4fd9 000b4fe5 000b4ff1 000b4ff9     .O...O...O...O..
   b62c0:	000b5001 000b500d 000b5015 000b501f     .P...P...P...P..
   b62d0:	000b5029 69726977 7200676e 20766365     )P..wiring.recv 
   b62e0:	6f727265 203d2072 00006425              error = %d..

000b62ec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b62f4:	000b5365 000b5389 000b58bb 000b5397     eS...S...X...S..
   b6304:	000b5369                                iS..

000b6308 <_ZTV9TCPClient>:
	...
   b6310:	000b5415 000b5449 000b52e1 000b52fb     .T..IT...R...R..
   b6320:	000b5751 000b5325 000b55c7 000b5359     QW..%S...U..YS..
   b6330:	000b5659 000b5499 000b55f5 000b5805     YV...T...U...X..
   b6340:	000b5595 000b535b 000b530d 000b539d     .U..[S...S...S..
   b6350:	000b5479 252d5925 64252d6d 3a482554     yT..%Y-%m-%dT%H:
   b6360:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b6370 <_ZTV11USARTSerial>:
	...
   b6378:	000b58d5 000b5941 000b5919 000b5115     .X..AY...Y...Q..
   b6388:	000b58e9 000b5905 000b58f7 000b5913     .X...Y...X...Y..
   b6398:	000b58d7 000b58db                       .X...X..

000b63a0 <_ZTV9USBSerial>:
	...
   b63a8:	000b597f 000b59e7 000b59bd 000b5115     .Y...Y...Y...Q..
   b63b8:	000b59af 000b5981 000b5991 000b59e1     .Y...Y...Y...Y..
   b63c8:	000b59a1 000b5979                       .Y..yY..

000b63d0 <_ZTVN5spark9WiFiClassE>:
	...
   b63d8:	000b5ad7 000b5acd 000b5ac3 000b5a79     .Z...Z...Z..yZ..
   b63e8:	000b5ab7 000b5aab 000b4ff1 000b4ff9     .Z...Z...O...O..
   b63f8:	000b5a9f 000b5a97 000b5a8d 000b5a83     .Z...Z...Z...Z..
   b6408:	000b5029                                )P..

000b640c <_ZSt7nothrow>:
	...

000b640d <_ZTSSt19_Sp_make_shared_tag>:
   b640d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b641d:	5f646572 00676174                        red_tag....

000b6428 <_ZTISt19_Sp_make_shared_tag>:
   b6428:	000b6468 000b640d                       hd...d..

000b6430 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6430:	000b64c8 000b643c 000b64ec              .d..<d...d..

000b643c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b643c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b644c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b645c:	00000045                                E...

000b6460 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6460:	00000000 000b6430 000b5d95 000b5da9     ....0d...]...]..
   b6470:	000b5f3d 000b5f3d 000b5e13 000b5d55     =_..=_...^..U]..
   b6480:	000b5dfb 000b5dbd 000b5d87              .]...]...]..

000b648c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b648c:	000b64c8 000b6498 000b6430              .d...d..0d..

000b6498 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6498:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b64a8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b64b8:	456f666e 00000000                       nfoE....

000b64c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b64c0:	00000000 000b648c 000b5e3d 000b5e51     .....d..=^..Q^..
   b64d0:	000b5f3d 000b5f3d 000b5e13 000b5d55     =_..=_...^..U]..
   b64e0:	000b5f11 000b5e9d 000b5e65              ._...^..e^..

000b64ec <_ZTISt9type_info>:
   b64ec:	000b6468 000b64f4                       hd...d..

000b64f4 <_ZTSSt9type_info>:
   b64f4:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b6504:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b6514:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b6524:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b6534:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b6544:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b6554:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b6564:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b6571 <_ctype_>:
   b6571:	20202000 20202020 28282020 20282828     .         ((((( 
   b6581:	20202020 20202020 20202020 20202020                     
   b6591:	10108820 10101010 10101010 10101010      ...............
   b65a1:	04040410 04040404 10040404 10101010     ................
   b65b1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b65c1:	01010101 01010101 01010101 10101010     ................
   b65d1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b65e1:	02020202 02020202 02020202 10101010     ................
   b65f1:	00000020 00000000 00000000 00000000      ...............
	...

000b6672 <link_const_data_end>:
	...

000b6674 <link_constructors_location>:
   b6674:	000b41a5 	.word	0x000b41a5
   b6678:	000b4df9 	.word	0x000b4df9
   b667c:	000b4e71 	.word	0x000b4e71
   b6680:	000b4fa1 	.word	0x000b4fa1
   b6684:	000b5101 	.word	0x000b5101
   b6688:	000b51a9 	.word	0x000b51a9
   b668c:	000b52bd 	.word	0x000b52bd
   b6690:	000b58c1 	.word	0x000b58c1
   b6694:	000b5ae1 	.word	0x000b5ae1
